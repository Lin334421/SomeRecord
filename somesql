--每个公司 commit 加减行数占比
select company,
       max(end_time)          end_time,
       min(start_time) as     start_time,
       sum(total__insertions) total__insertions,
       sum(total__deletions)  total__deletions,
       sum(total__lines)      total__lines,
       sum(commit_count)      commit_count,
       round(total__insertions/(select sum(total__insertions) from gits where search_key__repo = 'linux' and if_merged = 0)*100,3) as insertions_percentage,
       round(total__deletions/(select sum(total__deletions) from gits where search_key__repo = 'linux' and if_merged = 0)*100,3) as deletions_percentage,
       round(total__lines/(select sum(total__lines) from gits where search_key__repo = 'linux' and if_merged = 0)*100,3) as all_lines_percentage,
       round(commit_count/(select count() from gits where search_key__repo = 'linux' and if_merged = 0)*100,3) as commit_percentage
from (select multiIf(email_domain like '%huawei%' or email_domain = 'hisilicon.com', 'huawei',
                     email_domain like '%google%' or email_domain = 'android.com' or email_domain = 'chrome.com' or
                     email_domain = 'chromium.org' or email_domain = 'tensorflow.org', 'google',
                     email_domain like '%intel%', 'intel', 'redhat') as company,
             end_time,
             start_time,
             total__insertions,
             total__deletions,
             total__lines,
             commit_count
      from (select splitByChar('@', author_email)[2] as email_domain,
                   max(authored_date)                as end_time,
                   min(authored_date)                as start_time,
                   sum(total__insertions)            as total__insertions,
                   sum(total__deletions)             as total__deletions,
                   sum(total__lines)                 as total__lines,
                   count()                           as commit_count
            from gits
            where if_merged = 0
              and search_key__repo = 'linux'
              and (email_domain like '%intel%' or email_domain like '%google%' or email_domain like '%redhat%' or
                   email_domain like '%huawei%' or email_domain = 'android.com' or email_domain = 'chrome.com' or
                   email_domain = 'chromium.org' or email_domain = 'tensorflow.org' or email_domain = 'hisilicon.com' or
                   email_domain = 'china.huawei.com')
            group by email_domain
            order by total__lines desc))
group by company
order by total__lines desc

















-- rust 华为专家 metrics
select if(a.login != '', a.login, b.login) as login,
       create_issues_count,
       issues_comments_count,
       create_pr_count,
       reviewed_count,
       commit_committer_count from (select if(a.login != '', a.login, b.login) as login,
       create_issues_count,
       create_pr_count,
       reviewed_count,
       commit_committer_count
from (select if(a.login != '', a.login, b.login) as login, create_issues_count, create_pr_count, reviewed_count
      from (select if(a.login != '', a.login, b.login) as login, create_issues_count, create_pr_count
            from (-- 统计issues提出次数 近三年
                     select login, count() as create_issues_count
                     from (select argMax(user__login, created_at) as login
                           from github_issues
                           where search_key__repo = 'rust'
                             and pull_request__url = ''
                             and toYear(created_at) >= 2018
                           group by node_id)
                     where login global in ('Amanieu',
                                            'bdqnghi',
                                            'davidtwco',
                                            'GuillaumeGomez',
                                            'J-ZhengLi',
                                            'KarliosQu',
                                            'lcnr',
                                            'LuuuXXX',
                                            'm-ou-se',
                                            'MabinGo',
                                            'MichaelLing83',
                                            'mojave2',
                                            'petrochenkov',
                                            'QiangHeisenberg',
                                            'Sea-Chunmiao',
                                            'SparrowLii',
                                            'stevetan81',
                                            'surechen',
                                            'wain303009',
                                            'wangkirin',
                                            'yijunyu')
                     group by login
                     order by create_issues_count desc) as a global
                     full join (-- 统计pr提出次数 近三年
                select login, count() as create_pr_count
                from (select argMax(user__login, created_at) as login
                      from github_pull_requests
                      where search_key__repo = 'rust'
                        and toYear(created_at) >= 2018
                      group by node_id)
                where login global in ('Amanieu',
                                       'bdqnghi',
                                       'davidtwco',
                                       'GuillaumeGomez',
                                       'J-ZhengLi',
                                       'KarliosQu',
                                       'lcnr',
                                       'LuuuXXX',
                                       'm-ou-se',
                                       'MabinGo',
                                       'MichaelLing83',
                                       'mojave2',
                                       'petrochenkov',
                                       'QiangHeisenberg',
                                       'Sea-Chunmiao',
                                       'SparrowLii',
                                       'stevetan81',
                                       'surechen',
                                       'wain303009',
                                       'wangkirin',
                                       'yijunyu')
                group by login
                order by create_pr_count desc) as b on a.login = b.login) as a global
               full join (select login, count() reviewed_count
                          from (select JSONExtractString(timeline_raw, 'node_id')            as node_id,
                                       JSONExtractString(JSONExtractString(argMax(timeline_raw,
                                                                                  parseDateTimeBestEffort(JSONExtractString(timeline_raw, 'submitted_at'))),
                                                                           'user'), 'login') as login
                                from github_issues_timeline
                                where search_key__repo = 'rust'
                                  and toYear(parseDateTimeBestEffort(JSONExtractString(timeline_raw, 'submitted_at'))) >=
                                      2018
                                  and search_key__event = 'reviewed'

                                group by node_id)
                          where login global in ('Amanieu',
                                                 'bdqnghi',
                                                 'davidtwco',
                                                 'GuillaumeGomez',
                                                 'J-ZhengLi',
                                                 'KarliosQu',
                                                 'lcnr',
                                                 'LuuuXXX',
                                                 'm-ou-se',
                                                 'MabinGo',
                                                 'MichaelLing83',
                                                 'mojave2',
                                                 'petrochenkov',
                                                 'QiangHeisenberg',
                                                 'Sea-Chunmiao',
                                                 'SparrowLii',
                                                 'stevetan81',
                                                 'surechen',
                                                 'wain303009',
                                                 'wangkirin',
                                                 'yijunyu')
                          group by login
                          order by reviewed_count desc) as b on a.login = b.login) as a global
         full join (-- 作为一个committer
    select login, count() as commit_committer_count
    from (select sha, argMax(committer__login, commit__committer__date) as login
          from github_commits
          where search_key__repo = 'rust'
            and toYear(commit__committer__date) >= 2018
            and committer__login global in ('Amanieu',
                                            'bdqnghi',
                                            'davidtwco',
                                            'GuillaumeGomez',
                                            'J-ZhengLi',
                                            'KarliosQu',
                                            'lcnr',
                                            'LuuuXXX',
                                            'm-ou-se',
                                            'MabinGo',
                                            'MichaelLing83',
                                            'mojave2',
                                            'petrochenkov',
                                            'QiangHeisenberg',
                                            'Sea-Chunmiao',
                                            'SparrowLii',
                                            'stevetan81',
                                            'surechen',
                                            'wain303009',
                                            'wangkirin',
                                            'yijunyu')
          group by sha)
    group by login
    order by commit_committer_count desc) as b on a.login = b.login) as a global full join (select login,count() as issues_comments_count from (select node_id,argMax(user__login,created_at) as login from github_issues_comments where search_key__repo = 'rust' and user__login global in ('Amanieu',
                                            'bdqnghi',
                                            'davidtwco',
                                            'GuillaumeGomez',
                                            'J-ZhengLi',
                                            'KarliosQu',
                                            'lcnr',
                                            'LuuuXXX',
                                            'm-ou-se',
                                            'MabinGo',
                                            'MichaelLing83',
                                            'mojave2',
                                            'petrochenkov',
                                            'QiangHeisenberg',
                                            'Sea-Chunmiao',
                                            'SparrowLii',
                                            'stevetan81',
                                            'surechen',
                                            'wain303009',
                                            'wangkirin',
                                            'yijunyu') and toYear(created_at) >= 2018
            and search_key__number global in  (select number from github_issues where github_issues.search_key__repo='rust' and  pull_request__url = '' group by number)
 group by node_id) group by login order by issues_comments_count desc) as b on a.login = b.login
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
---------------------------------------------------------------llvm cn author commit次数更改代码行数，文件修改情况  按照月份

-- not merge author
select author_email,
       count() as      commit_count,
       sum(insertions) insertions,
       sum(deletions)  deletions,
       sum(lines)      lines,
        sum(files) as files_count
from (select *,
             splitByChar('@', author_email)[2]    as author_email_domain,
             splitByChar('@', committer_email)[2] as committer_email_domain
      from (select hexsha,
                   author_email,
                   authored_date,
                   committer_email,
                   committed_date,
                   message,
                   total__lines as insertions,
                   total__insertions as deletions,
                   total__deletions as lines,
                   total__files as files
            from gits
            where search_key__repo = 'llvm-project'
              and if_merged = 0
              and search_key__owner = 'llvm'
              and (author_email like '%.cn%' or gits.committer_email like '%.cn%')
            group by hexsha, author_email,
                     authored_date,
                     committer_email,
                     committed_date,
                     message,
                     total__insertions,
                     total__deletions,
                     total__files,
                     total__lines
)
         --where author_email like '%iscas.ac.cn%'
         )
group by author_email
order by commit_count desc







-- not merge author month
select author_email,
       month,
       count() as      commit_count,
       sum(insertions) insertions,
       sum(deletions)  deletions,
       sum(lines)      lines,
        sum(files) as files_count
from (select *,
             splitByChar('@', author_email)[2]    as author_email_domain,
             splitByChar('@', committer_email)[2] as committer_email_domain
      from (select hexsha,
                   author_email,
                   authored_date,
                   committer_email,
                   committed_date,
                   message,
                   total__lines as insertions,
                   total__insertions as deletions,
                   total__deletions as lines,
                   total__files as files
            from gits
            where search_key__repo = 'llvm-project'
              and if_merged = 0
              and search_key__owner = 'llvm'
              and (author_email like '%.cn%' or gits.committer_email like '%.cn%')
            group by hexsha, author_email,
                     authored_date,
                     committer_email,
                     committed_date,
                     message,
                     total__insertions,
                     total__deletions,
                     total__files,
                     total__lines
)
         --where author_email like '%iscas.ac.cn%'
         )
group by author_email,toYYYYMM(authored_date) as month
order by author_email ,month




;
--dir
select author_email,file_name,insertions,deletions,lines from (select *,
             splitByChar('@', author_email)[2]    as author_email_domain,
             splitByChar('@', committer_email)[2] as committer_email_domain
      from (select hexsha,
                   author_email,
                   authored_date,
                   committer_email,
                   committed_date,
                   message,
                   `files.file_name` as file_name,
                   `files.insertions` as insertions,
                   `files.deletions` as deletions,
                   `files.lines` as lines
            from gits
            where search_key__repo = 'llvm-project'
              and search_key__owner = 'llvm'
              and if_merged = 0
              and (author_email like '%.cn%' or gits.committer_email like '%.cn%')
            group by hexsha, author_email,
                     authored_date,
                     committer_email,
                     committed_date,
                     message,
                     `files.file_name`,
                     `files.insertions`,
                     `files.deletions`,
                     `files.lines`)
         --where author_email like '%iscas.ac.cn%'
         ) array join file_name,insertions,deletions,lines
order by author_email











-- dir month
;
select author_email,
       month,
       file_name,
       sum(insertions) as insertions,
       sum(deletions)  as deletions,
       sum(lines)      as lines
from (select author_email, authored_date, file_name, insertions, deletions, lines
      from (select *,
                   splitByChar('@', author_email)[2]    as author_email_domain,
                   splitByChar('@', committer_email)[2] as committer_email_domain
            from (select hexsha,
                         author_email,
                         authored_date,
                         committer_email,
                         committed_date,
                         message,
                         `files.file_name`  as file_name,
                         `files.insertions` as insertions,
                         `files.deletions`  as deletions,
                         `files.lines`      as lines
                  from gits
                  where search_key__repo = 'llvm-project'
                    and search_key__owner = 'llvm'
                    and if_merged = 0
                    and (author_email like '%.cn%' or gits.committer_email like '%.cn%')
                  group by hexsha, author_email,
                           authored_date,
                           committer_email,
                           committed_date,
                           message,
                           `files.file_name`,
                           `files.insertions`,
                           `files.deletions`,
                           `files.lines`)
               --where author_email like '%iscas.ac.cn%'
               ) array join file_name, insertions, deletions, lines)
group by author_email, toYYYYMM(authored_date) as month, file_name
order by author_email, month, file_name





-- committer

select committer_email,
       count() as      commit_count
from (select *,
             splitByChar('@', author_email)[2]    as author_email_domain,
             splitByChar('@', committer_email)[2] as committer_email_domain
      from (select hexsha,
                   author_email,
                   authored_date,
                   committer_email,
                   committed_date
            from gits
            where search_key__repo = 'llvm-project'
              and search_key__owner = 'llvm'
              and (author_email like '%.cn%' or gits.committer_email like '%.cn%')
            group by hexsha, author_email,
                     authored_date,
                     committer_email,
                     committed_date

)
         --where author_email like '%iscas.ac.cn%'
         )
group by committer_email
order by commit_count desc



-- committer month

select committer_email,month,
       count() as      commit_count
from (select *,
             splitByChar('@', author_email)[2]    as author_email_domain,
             splitByChar('@', committer_email)[2] as committer_email_domain
      from (select hexsha,
                   author_email,
                   authored_date,
                   committer_email,
                   committed_date
            from gits
            where search_key__repo = 'llvm-project'
              and search_key__owner = 'llvm'
              and (author_email like '%.cn%' or gits.committer_email like '%.cn%')
            group by hexsha, author_email,
                     authored_date,
                     committer_email,
                     committed_date

)
         --where author_email like '%iscas.ac.cn%'
         )
group by committer_email,toYYYYMM(committed_date) as month
order by committer_email,month



select a.github_id,a.email,b.company from github_id_email_map as a global  join (
    (
-- huawei
select *,toUnixTimestamp(now()) as timestamp,'huawei' as company from (select email
from (select author_email as email
      from gits
      group by author_email
      union all
      select committer_email as email
      from gits
      group by committer_email)
group by email) where splitByChar('@', email)[2] = 'huawei.com' or
       splitByChar('@', email)[2] = 'hisilicon.com' or
       splitByChar('@', email)[2] = 'huawei.partners.com' or
       splitByChar('@', email)[2] = 'china.huawei.com' or
       splitByChar('@', email)[2] = 'notesmail.huawei.com' or
       splitByChar('@', email)[2] = 'ohos.com.cn' or
       email like '%huawei%'
                      or
       email global in (select email
                               from github_id_email_map
                               where github_id global in
                                     (select id
                                      from github_profile
                                      where final_company_inferred_from_company = 'huawei'
                                      group by id)

                               group by email)

union all


--google
select *, toUnixTimestamp(now()) as timestamp, 'google' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where splitByChar('@', email)[2] = 'android.com'
   or splitByChar('@', email)[2] = 'chrome.com'
   or splitByChar('@', email)[2] = 'chromium.org'
   or splitByChar('@', email)[2] = 'google.com'
   or splitByChar('@', email)[2] = 'tensorflow.org'
   or email like '%google%'
   or email global in (select email
                       from github_id_email_map
                       where github_id global in
                             (select id
                              from github_profile
                              where final_company_inferred_from_company = 'google'
                              group by id)

                       group by email)

union all

-- facebook
select *, toUnixTimestamp(now()) as timestamp, 'meta' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where splitByChar('@', email)[2] = 'fb.com'
   or splitByChar('@', email)[2] = 'meta.com'
   or email like '%facebook%'
   or email global in (select email
                       from github_id_email_map
                       where github_id global in
                             (select id
                              from github_profile
                              where final_company_inferred_from_company = 'facebook'
                              group by id)

                       group by email)

union all

-- intel
select *, toUnixTimestamp(now()) as timestamp, 'intel' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where
                  splitByChar('@', email)[2] = 'intel.com' or
                  email like '%intel%'
                      or
                  email global in (select email
                                          from github_id_email_map
                                          where github_id global in
                                                (select id
                                                 from github_profile
                                                 where final_company_inferred_from_company = 'intel'
                                                 group by id)

                                          group by email)

union all




-- redhat
select *, toUnixTimestamp(now()) as timestamp, 'redhat' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where
                  splitByChar('@', email)[2] = 'redhat.com' or
                  email like '%redhat%'
                      or
                  email global in (select email
                                          from github_id_email_map
                                          where github_id global in
                                                (select id
                                                 from github_profile
                                                 where final_company_inferred_from_company = 'red hat'
                                                 group by id)

                                          group by email)

union all
--amd
select *, toUnixTimestamp(now()) as timestamp, 'amd' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where
                   splitByChar('@', email)[2] = 'amd.com' or
                  email global in (select email
                                          from github_id_email_map
                                          where github_id global in
                                                (select id
                                                 from github_profile
                                                 where final_company_inferred_from_company = 'amd'
                                                 group by id)

                                          group by email)
union all
--  amazon
select *, toUnixTimestamp(now()) as timestamp, 'amazon' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where   splitByChar('@', email)[2] = 'amazon.com' or
                  email like '%amazon%'
                      or
                  email global in (select email
                                          from github_id_email_map
                                          where github_id!=0 and  github_id global in
                                                (select id
                                                 from github_profile
                                                 where final_company_inferred_from_company = 'amazon'
                                                 group by id)

                                          group by email))) as b on  a.email = b.email



;
-- 各个公司pr情况
select
    search_key__owner,search_key__repo,year,company,count() as pr_count from (select search_key__owner,search_key__repo,number,toYear(created_at) as year,b.company from (-- pr 的提出
select * from github_pull_requests where ((search_key__owner = 'apache' and search_key__repo = 'activemq')
    or (search_key__owner = 'apache' and search_key__repo = 'kyuubi')
    or (search_key__owner = 'apache' and search_key__repo = 'bahir')
    or (search_key__owner = 'apache' and search_key__repo = 'phoenix')
    or (search_key__owner = 'apache' and search_key__repo = 'beam')
    or (search_key__owner = 'apache' and search_key__repo = 'ranger')
    or (search_key__owner = 'apache' and search_key__repo = 'cassandra')
    or (search_key__owner = 'apache' and search_key__repo = 'spark')
    or (search_key__owner = 'apache' and search_key__repo = 'flink')
    or (search_key__owner = 'apache' and search_key__repo = 'storm')
    or (search_key__owner = 'apache' and search_key__repo = 'hadoop')
    or (search_key__owner = 'apache' and search_key__repo = 'zookeeper')
    or (search_key__owner = 'apache' and search_key__repo = 'hbase')
    or (search_key__owner = 'elastic' and search_key__repo = 'elasticsearch')
    or (search_key__owner = 'apache' and search_key__repo = 'hive')
    or (search_key__owner = 'greenplum-db' and search_key__repo = 'gpdb')
    or (search_key__owner = 'apache' and search_key__repo = 'hudi')
    or (search_key__owner = 'apache' and search_key__repo = 'impala')
    or (search_key__owner = 'apache' and search_key__repo = 'arrow-julia')
    or (search_key__owner = 'o3de' and search_key__repo = 'o3de')
    or (search_key__owner = 'onnx' and search_key__repo = 'onnx')
    or (search_key__owner = 'apache' and search_key__repo = 'tvm')
    or (search_key__owner = 'Kitware' and search_key__repo = 'CMake')
    or (search_key__owner = 'llvm' and search_key__repo = 'llvm-project')
    or (search_key__owner = 'linux-test-project' and search_key__repo = 'ltp')
    or (search_key__owner = 'apache' and search_key__repo = 'maven')
    or (search_key__owner = 'apache' and search_key__repo = 'calcite')
    or (search_key__owner = 'apache' and search_key__repo = 'kudu')
    or (search_key__owner = 'MariaDB' and search_key__repo = 'server')
    or (search_key__owner = 'mongodb' and search_key__repo = 'mongo')
    or (search_key__owner = 'mysql' and search_key__repo = 'mysql-server')
    or (search_key__owner = 'redis' and search_key__repo = 'redis')
    or (search_key__owner = 'facebook' and search_key__repo = 'rocksdb')
    or (search_key__owner = 'php' and search_key__repo = 'php-src')
    or (search_key__owner = 'python' and search_key__repo = 'cpython')
    or (search_key__owner = 'rust-lang' and search_key__repo = 'rust')
    or (search_key__owner = 'ruby' and search_key__repo = 'ruby')
    or (search_key__owner = 'kubernetes' and search_key__repo = 'kubernetes')
    or (search_key__owner = 'apache' and search_key__repo = 'mesos')
    or (search_key__owner = 'apache' and search_key__repo = 'skywalking')
    or (search_key__owner = 'libvirt' and search_key__repo = 'libvirt')
    or (search_key__owner = 'ceph' and search_key__repo = 'ceph')
    or (search_key__owner = 'nats-io' and search_key__repo = 'nats-server')
    or (search_key__owner = 'openvswitch' and search_key__repo = 'ovs')
    or (search_key__owner = 'containerd' and search_key__repo = 'containerd')
    or (search_key__owner = 'coredns' and search_key__repo = 'coredns')
    or (search_key__owner = 'operator-framework' and search_key__repo = 'operator-sdk')
    or (search_key__owner = 'cri-o' and search_key__repo = 'cri-o')
    or (search_key__owner = 'prometheus' and search_key__repo = 'prometheus')
    or (search_key__owner = 'etcd-io' and search_key__repo = 'etcd')
    or (search_key__owner = 'qemu' and search_key__repo = 'qemu')
    or (search_key__owner = 'envoyproxy' and search_key__repo = 'envoy')
    or (search_key__owner = 'helm' and search_key__repo = 'helm')
    or (search_key__owner = 'hashicorp' and search_key__repo = 'terraform')
    or (search_key__owner = 'istio' and search_key__repo = 'istio')
    or (search_key__owner = 'vitessio' and search_key__repo = 'vitess')
    or (search_key__owner = 'akraino-edge-stack' and search_key__repo = 'icn-nodus')
    or (search_key__owner = 'DPDK' and search_key__repo = 'dpdk')
    or (search_key__owner = 'numpy' and search_key__repo = 'numpy')
    or (search_key__owner = 'cp2k' and search_key__repo = 'cp2k')
    or (search_key__owner = 'QEF' and search_key__repo = 'q-e')
    or (search_key__owner = 'wrf-model' and search_key__repo = 'WRF')
    or (search_key__owner = 'EddyRivasLab' and search_key__repo = 'hmmer')
    or (search_key__owner = 'lammps' and search_key__repo = 'lammps')
    or (search_key__owner = 'apache' and search_key__repo = 'camel')
    or (search_key__owner = 'grpc' and search_key__repo = 'grpc')
    or (search_key__owner = 'apache' and search_key__repo = 'thrift')
    or (search_key__owner = 'apache' and search_key__repo = 'httpd')
    or (search_key__owner = 'apache' and search_key__repo = 'tomcat')
    or (search_key__owner = 'haproxy' and search_key__repo = 'haproxy')
    or (search_key__owner = 'apache' and search_key__repo = 'groovy')
    or (search_key__owner = 'kubeflow' and search_key__repo = 'kubeflow')
    or (search_key__owner = 'eclipse-ee4j' and search_key__repo = 'glassfish')
    or (search_key__owner = 'apache' and search_key__repo = 'kafka')
    or (search_key__owner = 'memcached' and search_key__repo = 'memcached')
    or (search_key__owner = 'squid-cache' and search_key__repo = 'squid')
    or (search_key__owner = 'apache' and search_key__repo = 'karaf')
    or (search_key__owner = 'netty' and search_key__repo = 'netty')
    or (search_key__owner = 'varnishcache' and search_key__repo = 'varnish-cache')
    or (search_key__owner = 'apache' and search_key__repo = 'struts')
    or (search_key__owner = 'nginx' and search_key__repo = 'nginx')
    or (search_key__owner = 'apache' and search_key__repo = 'zeppelin')
    or (search_key__owner = 'openeuler-mirror' and search_key__repo = 'A-Tune')
    or (search_key__owner = 'gcc-mirror' and search_key__repo = 'gcc')
    or (search_key__owner = 'bminor' and search_key__repo = 'glibc')
    or (search_key__owner = 'coreos' and search_key__repo = 'grub')
    or (search_key__owner = 'intel' and search_key__repo = 'hyperscan')
    or (search_key__owner = 'intel' and search_key__repo = 'isa-l')
    or (search_key__owner = 'torvalds' and search_key__repo = 'linux')
    or (search_key__owner = 'bminor' and search_key__repo = 'musl')
    or (search_key__owner = 'opencv' and search_key__repo = 'opencv')
    or (search_key__owner = 'openssl' and search_key__repo = 'openssl')
    or (search_key__owner = 'openzfs' and search_key__repo = 'zfs')
    or (search_key__owner = 'google' and search_key__repo = 'snappy')
    or (search_key__owner = 'videolan' and search_key__repo = 'x265')
    or (search_key__owner = 'madler' and search_key__repo = 'zlib')
    or (search_key__owner = 'facebook' and search_key__repo = 'zstd')
    or (search_key__owner = 'persona-id' and search_key__repo = 'persona-ios-sdk')
    or (search_key__owner = 'persona-id' and search_key__repo = 'persona-android-sdk')
    or (search_key__owner = 'WebAssembly' and search_key__repo = 'WASI')
    or (search_key__owner = 'WebAssembly' and search_key__repo = 'gc')
    or (search_key__owner = 'adoptium' and search_key__repo = 'temurin-build')
    or (search_key__owner = 'adoptium' and search_key__repo = 'aqa-tests')
    or (search_key__owner = 'adoptium' and search_key__repo = 'installer')
    or (search_key__owner = 'adoptium' and search_key__repo = 'containers')
    or (search_key__owner = 'openjdk' and search_key__repo = 'jdk')
    or (search_key__owner = 'codenotary' and search_key__repo = 'kube-notary')
    or (search_key__owner = 'codenotary' and search_key__repo = 'merkletree')
    or (search_key__owner = 'codenotary' and search_key__repo = 'immuproof')
    or (search_key__owner = 'codenotary' and search_key__repo = 'immudb')
    or (search_key__owner = 'codenotary' and search_key__repo = 'cas')
    or (search_key__owner = 'oVirt' and search_key__repo = 'ovirt-engine')
    or (search_key__owner = 'onap' and search_key__repo = 'sdc')
    or (search_key__owner = 'onap' and search_key__repo = 'multicloud-k8s')
    or (search_key__owner = 'onap' and search_key__repo = 'oom')
    or (search_key__owner = 'onap' and search_key__repo = 'ccsdk-cds')
    or (search_key__owner = 'onap' and search_key__repo = 'so'))) as a global join (select a.github_id,a.email,b.company from github_id_email_map as a global  join (
    (
-- huawei
select *,toUnixTimestamp(now()) as timestamp,'huawei' as company from (select email
from (select author_email as email
      from gits
      group by author_email
      union all
      select committer_email as email
      from gits
      group by committer_email)
group by email) where splitByChar('@', email)[2] = 'huawei.com' or
       splitByChar('@', email)[2] = 'hisilicon.com' or
       splitByChar('@', email)[2] = 'huawei.partners.com' or
       splitByChar('@', email)[2] = 'china.huawei.com' or
       splitByChar('@', email)[2] = 'notesmail.huawei.com' or
       splitByChar('@', email)[2] = 'ohos.com.cn' or
       email like '%huawei%'
                      or
       email global in (select email
                               from github_id_email_map
                               where github_id global in
                                     (select id
                                      from github_profile
                                      where final_company_inferred_from_company = 'huawei'
                                      group by id)

                               group by email)

union all


--google
select *, toUnixTimestamp(now()) as timestamp, 'google' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where splitByChar('@', email)[2] = 'android.com'
   or splitByChar('@', email)[2] = 'chrome.com'
   or splitByChar('@', email)[2] = 'chromium.org'
   or splitByChar('@', email)[2] = 'google.com'
   or splitByChar('@', email)[2] = 'tensorflow.org'
   or email like '%google%'
   or email global in (select email
                       from github_id_email_map
                       where github_id global in
                             (select id
                              from github_profile
                              where final_company_inferred_from_company = 'google'
                              group by id)

                       group by email)

union all

-- facebook
select *, toUnixTimestamp(now()) as timestamp, 'meta' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where splitByChar('@', email)[2] = 'fb.com'
   or splitByChar('@', email)[2] = 'meta.com'
   or email like '%facebook%'
   or email global in (select email
                       from github_id_email_map
                       where github_id global in
                             (select id
                              from github_profile
                              where final_company_inferred_from_company = 'facebook'
                              group by id)

                       group by email)

union all

-- intel
select *, toUnixTimestamp(now()) as timestamp, 'intel' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where
                  splitByChar('@', email)[2] = 'intel.com' or
                  email like '%intel%'
                      or
                  email global in (select email
                                          from github_id_email_map
                                          where github_id global in
                                                (select id
                                                 from github_profile
                                                 where final_company_inferred_from_company = 'intel'
                                                 group by id)

                                          group by email)

union all




-- redhat
select *, toUnixTimestamp(now()) as timestamp, 'redhat' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where
                  splitByChar('@', email)[2] = 'redhat.com' or
                  email like '%redhat%'
                      or
                  email global in (select email
                                          from github_id_email_map
                                          where github_id global in
                                                (select id
                                                 from github_profile
                                                 where final_company_inferred_from_company = 'red hat'
                                                 group by id)

                                          group by email)

union all
--amd
select *, toUnixTimestamp(now()) as timestamp, 'amd' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where
                   splitByChar('@', email)[2] = 'amd.com' or
                  email global in (select email
                                          from github_id_email_map
                                          where github_id global in
                                                (select id
                                                 from github_profile
                                                 where final_company_inferred_from_company = 'amd'
                                                 group by id)

                                          group by email)
union all
--  amazon
select *, toUnixTimestamp(now()) as timestamp, 'amazon' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where   splitByChar('@', email)[2] = 'amazon.com' or
                  email like '%amazon%'
                      or
                  email global in (select email
                                          from github_id_email_map
                                          where github_id!=0 and  github_id global in
                                                (select id
                                                 from github_profile
                                                 where final_company_inferred_from_company = 'amazon'
                                                 group by id)

                                          group by email))) as b on  a.email = b.email) as b
on a.user__id = b.github_id) group by search_key__owner,search_key__repo,year,company
order by search_key__owner,search_key__repo,year,pr_count desc


-- pr comment
;
select
    search_key__owner,search_key__repo,year,company,count() as pr_comment_count from (select search_key__owner,search_key__repo,number,user__id,toYear(created_at) as year
from github_issues_comments global
         join (select search_key__owner, search_key__repo, number
               from github_pull_requests
               where (search_key__owner = 'apache' and search_key__repo = 'activemq')
                  or (search_key__owner = 'apache' and search_key__repo = 'kyuubi')
                  or (search_key__owner = 'apache' and search_key__repo = 'bahir')
                  or (search_key__owner = 'apache' and search_key__repo = 'phoenix')
                  or (search_key__owner = 'apache' and search_key__repo = 'beam')
                  or (search_key__owner = 'apache' and search_key__repo = 'ranger')
                  or (search_key__owner = 'apache' and search_key__repo = 'cassandra')
                  or (search_key__owner = 'apache' and search_key__repo = 'spark')
                  or (search_key__owner = 'apache' and search_key__repo = 'flink')
                  or (search_key__owner = 'apache' and search_key__repo = 'storm')
                  or (search_key__owner = 'apache' and search_key__repo = 'hadoop')
                  or (search_key__owner = 'apache' and search_key__repo = 'zookeeper')
                  or (search_key__owner = 'apache' and search_key__repo = 'hbase')
                  or (search_key__owner = 'elastic' and search_key__repo = 'elasticsearch')
                  or (search_key__owner = 'apache' and search_key__repo = 'hive')
                  or (search_key__owner = 'greenplum-db' and search_key__repo = 'gpdb')
                  or (search_key__owner = 'apache' and search_key__repo = 'hudi')
                  or (search_key__owner = 'apache' and search_key__repo = 'impala')
                  or (search_key__owner = 'apache' and search_key__repo = 'arrow-julia')
                  or (search_key__owner = 'o3de' and search_key__repo = 'o3de')
                  or (search_key__owner = 'onnx' and search_key__repo = 'onnx')
                  or (search_key__owner = 'apache' and search_key__repo = 'tvm')
                  or (search_key__owner = 'Kitware' and search_key__repo = 'CMake')
                  or (search_key__owner = 'llvm' and search_key__repo = 'llvm-project')
                  or (search_key__owner = 'linux-test-project' and search_key__repo = 'ltp')
                  or (search_key__owner = 'apache' and search_key__repo = 'maven')
                  or (search_key__owner = 'apache' and search_key__repo = 'calcite')
                  or (search_key__owner = 'apache' and search_key__repo = 'kudu')
                  or (search_key__owner = 'MariaDB' and search_key__repo = 'server')
                  or (search_key__owner = 'mongodb' and search_key__repo = 'mongo')
                  or (search_key__owner = 'mysql' and search_key__repo = 'mysql-server')
                  or (search_key__owner = 'redis' and search_key__repo = 'redis')
                  or (search_key__owner = 'facebook' and search_key__repo = 'rocksdb')
                  or (search_key__owner = 'php' and search_key__repo = 'php-src')
                  or (search_key__owner = 'python' and search_key__repo = 'cpython')
                  or (search_key__owner = 'rust-lang' and search_key__repo = 'rust')
                  or (search_key__owner = 'ruby' and search_key__repo = 'ruby')
                  or (search_key__owner = 'kubernetes' and search_key__repo = 'kubernetes')
                  or (search_key__owner = 'apache' and search_key__repo = 'mesos')
                  or (search_key__owner = 'apache' and search_key__repo = 'skywalking')
                  or (search_key__owner = 'libvirt' and search_key__repo = 'libvirt')
                  or (search_key__owner = 'ceph' and search_key__repo = 'ceph')
                  or (search_key__owner = 'nats-io' and search_key__repo = 'nats-server')
                  or (search_key__owner = 'openvswitch' and search_key__repo = 'ovs')
                  or (search_key__owner = 'containerd' and search_key__repo = 'containerd')
                  or (search_key__owner = 'coredns' and search_key__repo = 'coredns')
                  or (search_key__owner = 'operator-framework' and search_key__repo = 'operator-sdk')
                  or (search_key__owner = 'cri-o' and search_key__repo = 'cri-o')
                  or (search_key__owner = 'prometheus' and search_key__repo = 'prometheus')
                  or (search_key__owner = 'etcd-io' and search_key__repo = 'etcd')
                  or (search_key__owner = 'qemu' and search_key__repo = 'qemu')
                  or (search_key__owner = 'envoyproxy' and search_key__repo = 'envoy')
                  or (search_key__owner = 'helm' and search_key__repo = 'helm')
                  or (search_key__owner = 'hashicorp' and search_key__repo = 'terraform')
                  or (search_key__owner = 'istio' and search_key__repo = 'istio')
                  or (search_key__owner = 'vitessio' and search_key__repo = 'vitess')
                  or (search_key__owner = 'akraino-edge-stack' and search_key__repo = 'icn-nodus')
                  or (search_key__owner = 'DPDK' and search_key__repo = 'dpdk')
                  or (search_key__owner = 'numpy' and search_key__repo = 'numpy')
                  or (search_key__owner = 'cp2k' and search_key__repo = 'cp2k')
                  or (search_key__owner = 'QEF' and search_key__repo = 'q-e')
                  or (search_key__owner = 'wrf-model' and search_key__repo = 'WRF')
                  or (search_key__owner = 'EddyRivasLab' and search_key__repo = 'hmmer')
                  or (search_key__owner = 'lammps' and search_key__repo = 'lammps')
                  or (search_key__owner = 'apache' and search_key__repo = 'camel')
                  or (search_key__owner = 'grpc' and search_key__repo = 'grpc')
                  or (search_key__owner = 'apache' and search_key__repo = 'thrift')
                  or (search_key__owner = 'apache' and search_key__repo = 'httpd')
                  or (search_key__owner = 'apache' and search_key__repo = 'tomcat')
                  or (search_key__owner = 'haproxy' and search_key__repo = 'haproxy')
                  or (search_key__owner = 'apache' and search_key__repo = 'groovy')
                  or (search_key__owner = 'kubeflow' and search_key__repo = 'kubeflow')
                  or (search_key__owner = 'eclipse-ee4j' and search_key__repo = 'glassfish')
                  or (search_key__owner = 'apache' and search_key__repo = 'kafka')
                  or (search_key__owner = 'memcached' and search_key__repo = 'memcached')
                  or (search_key__owner = 'squid-cache' and search_key__repo = 'squid')
                  or (search_key__owner = 'apache' and search_key__repo = 'karaf')
                  or (search_key__owner = 'netty' and search_key__repo = 'netty')
                  or (search_key__owner = 'varnishcache' and search_key__repo = 'varnish-cache')
                  or (search_key__owner = 'apache' and search_key__repo = 'struts')
                  or (search_key__owner = 'nginx' and search_key__repo = 'nginx')
                  or (search_key__owner = 'apache' and search_key__repo = 'zeppelin')
                  or (search_key__owner = 'openeuler-mirror' and search_key__repo = 'A-Tune')
                  or (search_key__owner = 'gcc-mirror' and search_key__repo = 'gcc')
                  or (search_key__owner = 'bminor' and search_key__repo = 'glibc')
                  or (search_key__owner = 'coreos' and search_key__repo = 'grub')
                  or (search_key__owner = 'intel' and search_key__repo = 'hyperscan')
                  or (search_key__owner = 'intel' and search_key__repo = 'isa-l')
                  or (search_key__owner = 'torvalds' and search_key__repo = 'linux')
                  or (search_key__owner = 'bminor' and search_key__repo = 'musl')
                  or (search_key__owner = 'opencv' and search_key__repo = 'opencv')
                  or (search_key__owner = 'openssl' and search_key__repo = 'openssl')
                  or (search_key__owner = 'openzfs' and search_key__repo = 'zfs')
                  or (search_key__owner = 'google' and search_key__repo = 'snappy')
                  or (search_key__owner = 'videolan' and search_key__repo = 'x265')
                  or (search_key__owner = 'madler' and search_key__repo = 'zlib')
                  or (search_key__owner = 'facebook' and search_key__repo = 'zstd')
                  or (search_key__owner = 'persona-id' and search_key__repo = 'persona-ios-sdk')
                  or (search_key__owner = 'persona-id' and search_key__repo = 'persona-android-sdk')
                  or (search_key__owner = 'WebAssembly' and search_key__repo = 'WASI')
                  or (search_key__owner = 'WebAssembly' and search_key__repo = 'gc')
                  or (search_key__owner = 'adoptium' and search_key__repo = 'temurin-build')
                  or (search_key__owner = 'adoptium' and search_key__repo = 'aqa-tests')
                  or (search_key__owner = 'adoptium' and search_key__repo = 'installer')
                  or (search_key__owner = 'adoptium' and search_key__repo = 'containers')
                  or (search_key__owner = 'openjdk' and search_key__repo = 'jdk')
                  or (search_key__owner = 'codenotary' and search_key__repo = 'kube-notary')
                  or (search_key__owner = 'codenotary' and search_key__repo = 'merkletree')
                  or (search_key__owner = 'codenotary' and search_key__repo = 'immuproof')
                  or (search_key__owner = 'codenotary' and search_key__repo = 'immudb')
                  or (search_key__owner = 'codenotary' and search_key__repo = 'cas')
                  or (search_key__owner = 'oVirt' and search_key__repo = 'ovirt-engine')
                  or (search_key__owner = 'onap' and search_key__repo = 'sdc')
                  or (search_key__owner = 'onap' and search_key__repo = 'multicloud-k8s')
                  or (search_key__owner = 'onap' and search_key__repo = 'oom')
                  or (search_key__owner = 'onap' and search_key__repo = 'ccsdk-cds')
                  or (search_key__owner = 'onap' and search_key__repo = 'so')
               group by search_key__owner, search_key__repo, number) as b
              on github_issues_comments.search_key__owner = b.search_key__owner and
                 github_issues_comments.search_key__repo = b.search_key__repo
                  and github_issues_comments.search_key__number = b.number) as a
global join (select a.github_id,a.email,b.company from github_id_email_map as a global  join (
    (
-- huawei
select *,toUnixTimestamp(now()) as timestamp,'huawei' as company from (select email
from (select author_email as email
      from gits
      group by author_email
      union all
      select committer_email as email
      from gits
      group by committer_email)
group by email) where splitByChar('@', email)[2] = 'huawei.com' or
       splitByChar('@', email)[2] = 'hisilicon.com' or
       splitByChar('@', email)[2] = 'huawei.partners.com' or
       splitByChar('@', email)[2] = 'china.huawei.com' or
       splitByChar('@', email)[2] = 'notesmail.huawei.com' or
       splitByChar('@', email)[2] = 'ohos.com.cn' or
       email like '%huawei%'
                      or
       email global in (select email
                               from github_id_email_map
                               where github_id global in
                                     (select id
                                      from github_profile
                                      where final_company_inferred_from_company = 'huawei'
                                      group by id)

                               group by email)

union all


--google
select *, toUnixTimestamp(now()) as timestamp, 'google' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where splitByChar('@', email)[2] = 'android.com'
   or splitByChar('@', email)[2] = 'chrome.com'
   or splitByChar('@', email)[2] = 'chromium.org'
   or splitByChar('@', email)[2] = 'google.com'
   or splitByChar('@', email)[2] = 'tensorflow.org'
   or email like '%google%'
   or email global in (select email
                       from github_id_email_map
                       where github_id global in
                             (select id
                              from github_profile
                              where final_company_inferred_from_company = 'google'
                              group by id)

                       group by email)

union all

-- facebook
select *, toUnixTimestamp(now()) as timestamp, 'meta' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where splitByChar('@', email)[2] = 'fb.com'
   or splitByChar('@', email)[2] = 'meta.com'
   or email like '%facebook%'
   or email global in (select email
                       from github_id_email_map
                       where github_id global in
                             (select id
                              from github_profile
                              where final_company_inferred_from_company = 'facebook'
                              group by id)

                       group by email)

union all

-- intel
select *, toUnixTimestamp(now()) as timestamp, 'intel' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where
                  splitByChar('@', email)[2] = 'intel.com' or
                  email like '%intel%'
                      or
                  email global in (select email
                                          from github_id_email_map
                                          where github_id global in
                                                (select id
                                                 from github_profile
                                                 where final_company_inferred_from_company = 'intel'
                                                 group by id)

                                          group by email)

union all




-- redhat
select *, toUnixTimestamp(now()) as timestamp, 'redhat' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where
                  splitByChar('@', email)[2] = 'redhat.com' or
                  email like '%redhat%'
                      or
                  email global in (select email
                                          from github_id_email_map
                                          where github_id global in
                                                (select id
                                                 from github_profile
                                                 where final_company_inferred_from_company = 'red hat'
                                                 group by id)

                                          group by email)

union all
--amd
select *, toUnixTimestamp(now()) as timestamp, 'amd' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where
                   splitByChar('@', email)[2] = 'amd.com' or
                  email global in (select email
                                          from github_id_email_map
                                          where github_id global in
                                                (select id
                                                 from github_profile
                                                 where final_company_inferred_from_company = 'amd'
                                                 group by id)

                                          group by email)
union all
--  amazon
select *, toUnixTimestamp(now()) as timestamp, 'amazon' as company
from (select email
      from (select author_email as email
            from gits
            group by author_email
            union all
            select committer_email as email
            from gits
            group by committer_email)
      group by email)
where   splitByChar('@', email)[2] = 'amazon.com' or
                  email like '%amazon%'
                      or
                  email global in (select email
                                          from github_id_email_map
                                          where github_id!=0 and  github_id global in
                                                (select id
                                                 from github_profile
                                                 where final_company_inferred_from_company = 'amazon'
                                                 group by id)

                                          group by email))) as b on  a.email = b.email) as b on a.user__id = b.github_id
group by search_key__owner,search_key__repo,year,company
order by search_key__owner,search_key__repo,year,pr_comment_count desc



;
select if(a.search_key__owner='',b.search_key__owner,a.search_key__owner) as owner,
       if(a.search_key__owner='',b.search_key__repo,a.search_key__repo) as repo,
       if(a.search_key__owner='',b.company,a.company) as company,
       if(a.search_key__owner='',b.year,a.year) as year,
       pr_count,
       pr_comment_count
from (select search_key__owner,
             search_key__repo,
             year,
             company,
             count() as pr_count
      from (select search_key__owner, search_key__repo, number, toYear(created_at) as year, b.company
            from (-- pr 的提出
                     select *
                     from github_pull_requests
                     where ((search_key__owner = 'apache' and search_key__repo = 'activemq')
                         or (search_key__owner = 'apache' and search_key__repo = 'kyuubi')
                         or (search_key__owner = 'apache' and search_key__repo = 'bahir')
                         or (search_key__owner = 'apache' and search_key__repo = 'phoenix')
                         or (search_key__owner = 'apache' and search_key__repo = 'beam')
                         or (search_key__owner = 'apache' and search_key__repo = 'ranger')
                         or (search_key__owner = 'apache' and search_key__repo = 'cassandra')
                         or (search_key__owner = 'apache' and search_key__repo = 'spark')
                         or (search_key__owner = 'apache' and search_key__repo = 'flink')
                         or (search_key__owner = 'apache' and search_key__repo = 'storm')
                         or (search_key__owner = 'apache' and search_key__repo = 'hadoop')
                         or (search_key__owner = 'apache' and search_key__repo = 'zookeeper')
                         or (search_key__owner = 'apache' and search_key__repo = 'hbase')
                         or (search_key__owner = 'elastic' and search_key__repo = 'elasticsearch')
                         or (search_key__owner = 'apache' and search_key__repo = 'hive')
                         or (search_key__owner = 'greenplum-db' and search_key__repo = 'gpdb')
                         or (search_key__owner = 'apache' and search_key__repo = 'hudi')
                         or (search_key__owner = 'apache' and search_key__repo = 'impala')
                         or (search_key__owner = 'apache' and search_key__repo = 'arrow-julia')
                         or (search_key__owner = 'o3de' and search_key__repo = 'o3de')
                         or (search_key__owner = 'onnx' and search_key__repo = 'onnx')
                         or (search_key__owner = 'apache' and search_key__repo = 'tvm')
                         or (search_key__owner = 'Kitware' and search_key__repo = 'CMake')
                         or (search_key__owner = 'llvm' and search_key__repo = 'llvm-project')
                         or (search_key__owner = 'linux-test-project' and search_key__repo = 'ltp')
                         or (search_key__owner = 'apache' and search_key__repo = 'maven')
                         or (search_key__owner = 'apache' and search_key__repo = 'calcite')
                         or (search_key__owner = 'apache' and search_key__repo = 'kudu')
                         or (search_key__owner = 'MariaDB' and search_key__repo = 'server')
                         or (search_key__owner = 'mongodb' and search_key__repo = 'mongo')
                         or (search_key__owner = 'mysql' and search_key__repo = 'mysql-server')
                         or (search_key__owner = 'redis' and search_key__repo = 'redis')
                         or (search_key__owner = 'facebook' and search_key__repo = 'rocksdb')
                         or (search_key__owner = 'php' and search_key__repo = 'php-src')
                         or (search_key__owner = 'python' and search_key__repo = 'cpython')
                         or (search_key__owner = 'rust-lang' and search_key__repo = 'rust')
                         or (search_key__owner = 'ruby' and search_key__repo = 'ruby')
                         or (search_key__owner = 'kubernetes' and search_key__repo = 'kubernetes')
                         or (search_key__owner = 'apache' and search_key__repo = 'mesos')
                         or (search_key__owner = 'apache' and search_key__repo = 'skywalking')
                         or (search_key__owner = 'libvirt' and search_key__repo = 'libvirt')
                         or (search_key__owner = 'ceph' and search_key__repo = 'ceph')
                         or (search_key__owner = 'nats-io' and search_key__repo = 'nats-server')
                         or (search_key__owner = 'openvswitch' and search_key__repo = 'ovs')
                         or (search_key__owner = 'containerd' and search_key__repo = 'containerd')
                         or (search_key__owner = 'coredns' and search_key__repo = 'coredns')
                         or (search_key__owner = 'operator-framework' and search_key__repo = 'operator-sdk')
                         or (search_key__owner = 'cri-o' and search_key__repo = 'cri-o')
                         or (search_key__owner = 'prometheus' and search_key__repo = 'prometheus')
                         or (search_key__owner = 'etcd-io' and search_key__repo = 'etcd')
                         or (search_key__owner = 'qemu' and search_key__repo = 'qemu')
                         or (search_key__owner = 'envoyproxy' and search_key__repo = 'envoy')
                         or (search_key__owner = 'helm' and search_key__repo = 'helm')
                         or (search_key__owner = 'hashicorp' and search_key__repo = 'terraform')
                         or (search_key__owner = 'istio' and search_key__repo = 'istio')
                         or (search_key__owner = 'vitessio' and search_key__repo = 'vitess')
                         or (search_key__owner = 'akraino-edge-stack' and search_key__repo = 'icn-nodus')
                         or (search_key__owner = 'DPDK' and search_key__repo = 'dpdk')
                         or (search_key__owner = 'numpy' and search_key__repo = 'numpy')
                         or (search_key__owner = 'cp2k' and search_key__repo = 'cp2k')
                         or (search_key__owner = 'QEF' and search_key__repo = 'q-e')
                         or (search_key__owner = 'wrf-model' and search_key__repo = 'WRF')
                         or (search_key__owner = 'EddyRivasLab' and search_key__repo = 'hmmer')
                         or (search_key__owner = 'lammps' and search_key__repo = 'lammps')
                         or (search_key__owner = 'apache' and search_key__repo = 'camel')
                         or (search_key__owner = 'grpc' and search_key__repo = 'grpc')
                         or (search_key__owner = 'apache' and search_key__repo = 'thrift')
                         or (search_key__owner = 'apache' and search_key__repo = 'httpd')
                         or (search_key__owner = 'apache' and search_key__repo = 'tomcat')
                         or (search_key__owner = 'haproxy' and search_key__repo = 'haproxy')
                         or (search_key__owner = 'apache' and search_key__repo = 'groovy')
                         or (search_key__owner = 'kubeflow' and search_key__repo = 'kubeflow')
                         or (search_key__owner = 'eclipse-ee4j' and search_key__repo = 'glassfish')
                         or (search_key__owner = 'apache' and search_key__repo = 'kafka')
                         or (search_key__owner = 'memcached' and search_key__repo = 'memcached')
                         or (search_key__owner = 'squid-cache' and search_key__repo = 'squid')
                         or (search_key__owner = 'apache' and search_key__repo = 'karaf')
                         or (search_key__owner = 'netty' and search_key__repo = 'netty')
                         or (search_key__owner = 'varnishcache' and search_key__repo = 'varnish-cache')
                         or (search_key__owner = 'apache' and search_key__repo = 'struts')
                         or (search_key__owner = 'nginx' and search_key__repo = 'nginx')
                         or (search_key__owner = 'apache' and search_key__repo = 'zeppelin')
                         or (search_key__owner = 'openeuler-mirror' and search_key__repo = 'A-Tune')
                         or (search_key__owner = 'gcc-mirror' and search_key__repo = 'gcc')
                         or (search_key__owner = 'bminor' and search_key__repo = 'glibc')
                         or (search_key__owner = 'coreos' and search_key__repo = 'grub')
                         or (search_key__owner = 'intel' and search_key__repo = 'hyperscan')
                         or (search_key__owner = 'intel' and search_key__repo = 'isa-l')
                         or (search_key__owner = 'torvalds' and search_key__repo = 'linux')
                         or (search_key__owner = 'bminor' and search_key__repo = 'musl')
                         or (search_key__owner = 'opencv' and search_key__repo = 'opencv')
                         or (search_key__owner = 'openssl' and search_key__repo = 'openssl')
                         or (search_key__owner = 'openzfs' and search_key__repo = 'zfs')
                         or (search_key__owner = 'google' and search_key__repo = 'snappy')
                         or (search_key__owner = 'videolan' and search_key__repo = 'x265')
                         or (search_key__owner = 'madler' and search_key__repo = 'zlib')
                         or (search_key__owner = 'facebook' and search_key__repo = 'zstd')
                         or (search_key__owner = 'persona-id' and search_key__repo = 'persona-ios-sdk')
                         or (search_key__owner = 'persona-id' and search_key__repo = 'persona-android-sdk')
                         or (search_key__owner = 'WebAssembly' and search_key__repo = 'WASI')
                         or (search_key__owner = 'WebAssembly' and search_key__repo = 'gc')
                         or (search_key__owner = 'adoptium' and search_key__repo = 'temurin-build')
                         or (search_key__owner = 'adoptium' and search_key__repo = 'aqa-tests')
                         or (search_key__owner = 'adoptium' and search_key__repo = 'installer')
                         or (search_key__owner = 'adoptium' and search_key__repo = 'containers')
                         or (search_key__owner = 'openjdk' and search_key__repo = 'jdk')
                         or (search_key__owner = 'codenotary' and search_key__repo = 'kube-notary')
                         or (search_key__owner = 'codenotary' and search_key__repo = 'merkletree')
                         or (search_key__owner = 'codenotary' and search_key__repo = 'immuproof')
                         or (search_key__owner = 'codenotary' and search_key__repo = 'immudb')
                         or (search_key__owner = 'codenotary' and search_key__repo = 'cas')
                         or (search_key__owner = 'oVirt' and search_key__repo = 'ovirt-engine')
                         or (search_key__owner = 'onap' and search_key__repo = 'sdc')
                         or (search_key__owner = 'onap' and search_key__repo = 'multicloud-k8s')
                         or (search_key__owner = 'onap' and search_key__repo = 'oom')
                         or (search_key__owner = 'onap' and search_key__repo = 'ccsdk-cds')
                         or (search_key__owner = 'onap' and search_key__repo = 'so'))) as a global
                     join (select a.github_id, a.email, b.company
                           from github_id_email_map as a global
                                    join (
                               (
-- huawei
                                   select *, toUnixTimestamp(now()) as timestamp, 'huawei' as company
                                   from (select email
                                         from (select author_email as email
                                               from gits
                                               group by author_email
                                               union all
                                               select committer_email as email
                                               from gits
                                               group by committer_email)
                                         group by email)
                                   where splitByChar('@', email)[2] = 'huawei.com'
                                      or splitByChar('@', email)[2] = 'hisilicon.com'
                                      or splitByChar('@', email)[2] = 'huawei.partners.com'
                                      or splitByChar('@', email)[2] = 'china.huawei.com'
                                      or splitByChar('@', email)[2] = 'notesmail.huawei.com'
                                      or splitByChar('@', email)[2] = 'ohos.com.cn'
                                      or email like '%huawei%'
                                      or email global in (select email
                                                          from github_id_email_map
                                                          where github_id global in
                                                                (select id
                                                                 from github_profile
                                                                 where final_company_inferred_from_company = 'huawei'
                                                                 group by id)

                                                          group by email)

                                   union all


--google
                                   select *, toUnixTimestamp(now()) as timestamp, 'google' as company
                                   from (select email
                                         from (select author_email as email
                                               from gits
                                               group by author_email
                                               union all
                                               select committer_email as email
                                               from gits
                                               group by committer_email)
                                         group by email)
                                   where splitByChar('@', email)[2] = 'android.com'
                                      or splitByChar('@', email)[2] = 'chrome.com'
                                      or splitByChar('@', email)[2] = 'chromium.org'
                                      or splitByChar('@', email)[2] = 'google.com'
                                      or splitByChar('@', email)[2] = 'tensorflow.org'
                                      or email like '%google%'
                                      or email global in (select email
                                                          from github_id_email_map
                                                          where github_id global in
                                                                (select id
                                                                 from github_profile
                                                                 where final_company_inferred_from_company = 'google'
                                                                 group by id)

                                                          group by email)

                                   union all

-- facebook
                                   select *, toUnixTimestamp(now()) as timestamp, 'meta' as company
                                   from (select email
                                         from (select author_email as email
                                               from gits
                                               group by author_email
                                               union all
                                               select committer_email as email
                                               from gits
                                               group by committer_email)
                                         group by email)
                                   where splitByChar('@', email)[2] = 'fb.com'
                                      or splitByChar('@', email)[2] = 'meta.com'
                                      or email like '%facebook%'
                                      or email global in (select email
                                                          from github_id_email_map
                                                          where github_id global in
                                                                (select id
                                                                 from github_profile
                                                                 where final_company_inferred_from_company = 'facebook'
                                                                 group by id)

                                                          group by email)

                                   union all

-- intel
                                   select *, toUnixTimestamp(now()) as timestamp, 'intel' as company
                                   from (select email
                                         from (select author_email as email
                                               from gits
                                               group by author_email
                                               union all
                                               select committer_email as email
                                               from gits
                                               group by committer_email)
                                         group by email)
                                   where splitByChar('@', email)[2] = 'intel.com'
                                      or email like '%intel%'
                                      or email global in (select email
                                                          from github_id_email_map
                                                          where github_id global in
                                                                (select id
                                                                 from github_profile
                                                                 where final_company_inferred_from_company = 'intel'
                                                                 group by id)

                                                          group by email)

                                   union all


-- redhat
                                   select *, toUnixTimestamp(now()) as timestamp, 'redhat' as company
                                   from (select email
                                         from (select author_email as email
                                               from gits
                                               group by author_email
                                               union all
                                               select committer_email as email
                                               from gits
                                               group by committer_email)
                                         group by email)
                                   where splitByChar('@', email)[2] = 'redhat.com'
                                      or email like '%redhat%'
                                      or email global in (select email
                                                          from github_id_email_map
                                                          where github_id global in
                                                                (select id
                                                                 from github_profile
                                                                 where final_company_inferred_from_company = 'red hat'
                                                                 group by id)

                                                          group by email)

                                   union all
--amd
                                   select *, toUnixTimestamp(now()) as timestamp, 'amd' as company
                                   from (select email
                                         from (select author_email as email
                                               from gits
                                               group by author_email
                                               union all
                                               select committer_email as email
                                               from gits
                                               group by committer_email)
                                         group by email)
                                   where splitByChar('@', email)[2] = 'amd.com'
                                      or email global in (select email
                                                          from github_id_email_map
                                                          where github_id global in
                                                                (select id
                                                                 from github_profile
                                                                 where final_company_inferred_from_company = 'amd'
                                                                 group by id)

                                                          group by email)
                                   union all
--  amazon
                                   select *, toUnixTimestamp(now()) as timestamp, 'amazon' as company
                                   from (select email
                                         from (select author_email as email
                                               from gits
                                               group by author_email
                                               union all
                                               select committer_email as email
                                               from gits
                                               group by committer_email)
                                         group by email)
                                   where splitByChar('@', email)[2] = 'amazon.com'
                                      or email like '%amazon%'
                                      or email global in (select email
                                                          from github_id_email_map
                                                          where github_id != 0
                                                            and github_id global in
                                                                (select id
                                                                 from github_profile
                                                                 where final_company_inferred_from_company = 'amazon'
                                                                 group by id)

                                                          group by email))) as b on a.email = b.email) as b
                          on a.user__id = b.github_id)
      group by search_key__owner, search_key__repo, year, company
      order by search_key__owner, search_key__repo, year, pr_count desc) as a global
         full join (select search_key__owner,
                           search_key__repo,
                           year,
                           company,
                           count() as pr_comment_count
                    from (select search_key__owner, search_key__repo, number, user__id, toYear(created_at) as year
                          from github_issues_comments global
                                   join (select search_key__owner, search_key__repo, number
                                         from github_pull_requests
                                         where (search_key__owner = 'apache' and search_key__repo = 'activemq')
                                            or (search_key__owner = 'apache' and search_key__repo = 'kyuubi')
                                            or (search_key__owner = 'apache' and search_key__repo = 'bahir')
                                            or (search_key__owner = 'apache' and search_key__repo = 'phoenix')
                                            or (search_key__owner = 'apache' and search_key__repo = 'beam')
                                            or (search_key__owner = 'apache' and search_key__repo = 'ranger')
                                            or (search_key__owner = 'apache' and search_key__repo = 'cassandra')
                                            or (search_key__owner = 'apache' and search_key__repo = 'spark')
                                            or (search_key__owner = 'apache' and search_key__repo = 'flink')
                                            or (search_key__owner = 'apache' and search_key__repo = 'storm')
                                            or (search_key__owner = 'apache' and search_key__repo = 'hadoop')
                                            or (search_key__owner = 'apache' and search_key__repo = 'zookeeper')
                                            or (search_key__owner = 'apache' and search_key__repo = 'hbase')
                                            or (search_key__owner = 'elastic' and search_key__repo = 'elasticsearch')
                                            or (search_key__owner = 'apache' and search_key__repo = 'hive')
                                            or (search_key__owner = 'greenplum-db' and search_key__repo = 'gpdb')
                                            or (search_key__owner = 'apache' and search_key__repo = 'hudi')
                                            or (search_key__owner = 'apache' and search_key__repo = 'impala')
                                            or (search_key__owner = 'apache' and search_key__repo = 'arrow-julia')
                                            or (search_key__owner = 'o3de' and search_key__repo = 'o3de')
                                            or (search_key__owner = 'onnx' and search_key__repo = 'onnx')
                                            or (search_key__owner = 'apache' and search_key__repo = 'tvm')
                                            or (search_key__owner = 'Kitware' and search_key__repo = 'CMake')
                                            or (search_key__owner = 'llvm' and search_key__repo = 'llvm-project')
                                            or (search_key__owner = 'linux-test-project' and search_key__repo = 'ltp')
                                            or (search_key__owner = 'apache' and search_key__repo = 'maven')
                                            or (search_key__owner = 'apache' and search_key__repo = 'calcite')
                                            or (search_key__owner = 'apache' and search_key__repo = 'kudu')
                                            or (search_key__owner = 'MariaDB' and search_key__repo = 'server')
                                            or (search_key__owner = 'mongodb' and search_key__repo = 'mongo')
                                            or (search_key__owner = 'mysql' and search_key__repo = 'mysql-server')
                                            or (search_key__owner = 'redis' and search_key__repo = 'redis')
                                            or (search_key__owner = 'facebook' and search_key__repo = 'rocksdb')
                                            or (search_key__owner = 'php' and search_key__repo = 'php-src')
                                            or (search_key__owner = 'python' and search_key__repo = 'cpython')
                                            or (search_key__owner = 'rust-lang' and search_key__repo = 'rust')
                                            or (search_key__owner = 'ruby' and search_key__repo = 'ruby')
                                            or (search_key__owner = 'kubernetes' and search_key__repo = 'kubernetes')
                                            or (search_key__owner = 'apache' and search_key__repo = 'mesos')
                                            or (search_key__owner = 'apache' and search_key__repo = 'skywalking')
                                            or (search_key__owner = 'libvirt' and search_key__repo = 'libvirt')
                                            or (search_key__owner = 'ceph' and search_key__repo = 'ceph')
                                            or (search_key__owner = 'nats-io' and search_key__repo = 'nats-server')
                                            or (search_key__owner = 'openvswitch' and search_key__repo = 'ovs')
                                            or (search_key__owner = 'containerd' and search_key__repo = 'containerd')
                                            or (search_key__owner = 'coredns' and search_key__repo = 'coredns')
                                            or (search_key__owner = 'operator-framework' and
                                                search_key__repo = 'operator-sdk')
                                            or (search_key__owner = 'cri-o' and search_key__repo = 'cri-o')
                                            or (search_key__owner = 'prometheus' and search_key__repo = 'prometheus')
                                            or (search_key__owner = 'etcd-io' and search_key__repo = 'etcd')
                                            or (search_key__owner = 'qemu' and search_key__repo = 'qemu')
                                            or (search_key__owner = 'envoyproxy' and search_key__repo = 'envoy')
                                            or (search_key__owner = 'helm' and search_key__repo = 'helm')
                                            or (search_key__owner = 'hashicorp' and search_key__repo = 'terraform')
                                            or (search_key__owner = 'istio' and search_key__repo = 'istio')
                                            or (search_key__owner = 'vitessio' and search_key__repo = 'vitess')
                                            or (search_key__owner = 'akraino-edge-stack' and search_key__repo = 'icn-nodus')
                                            or (search_key__owner = 'DPDK' and search_key__repo = 'dpdk')
                                            or (search_key__owner = 'numpy' and search_key__repo = 'numpy')
                                            or (search_key__owner = 'cp2k' and search_key__repo = 'cp2k')
                                            or (search_key__owner = 'QEF' and search_key__repo = 'q-e')
                                            or (search_key__owner = 'wrf-model' and search_key__repo = 'WRF')
                                            or (search_key__owner = 'EddyRivasLab' and search_key__repo = 'hmmer')
                                            or (search_key__owner = 'lammps' and search_key__repo = 'lammps')
                                            or (search_key__owner = 'apache' and search_key__repo = 'camel')
                                            or (search_key__owner = 'grpc' and search_key__repo = 'grpc')
                                            or (search_key__owner = 'apache' and search_key__repo = 'thrift')
                                            or (search_key__owner = 'apache' and search_key__repo = 'httpd')
                                            or (search_key__owner = 'apache' and search_key__repo = 'tomcat')
                                            or (search_key__owner = 'haproxy' and search_key__repo = 'haproxy')
                                            or (search_key__owner = 'apache' and search_key__repo = 'groovy')
                                            or (search_key__owner = 'kubeflow' and search_key__repo = 'kubeflow')
                                            or (search_key__owner = 'eclipse-ee4j' and search_key__repo = 'glassfish')
                                            or (search_key__owner = 'apache' and search_key__repo = 'kafka')
                                            or (search_key__owner = 'memcached' and search_key__repo = 'memcached')
                                            or (search_key__owner = 'squid-cache' and search_key__repo = 'squid')
                                            or (search_key__owner = 'apache' and search_key__repo = 'karaf')
                                            or (search_key__owner = 'netty' and search_key__repo = 'netty')
                                            or (search_key__owner = 'varnishcache' and search_key__repo = 'varnish-cache')
                                            or (search_key__owner = 'apache' and search_key__repo = 'struts')
                                            or (search_key__owner = 'nginx' and search_key__repo = 'nginx')
                                            or (search_key__owner = 'apache' and search_key__repo = 'zeppelin')
                                            or (search_key__owner = 'openeuler-mirror' and search_key__repo = 'A-Tune')
                                            or (search_key__owner = 'gcc-mirror' and search_key__repo = 'gcc')
                                            or (search_key__owner = 'bminor' and search_key__repo = 'glibc')
                                            or (search_key__owner = 'coreos' and search_key__repo = 'grub')
                                            or (search_key__owner = 'intel' and search_key__repo = 'hyperscan')
                                            or (search_key__owner = 'intel' and search_key__repo = 'isa-l')
                                            or (search_key__owner = 'torvalds' and search_key__repo = 'linux')
                                            or (search_key__owner = 'bminor' and search_key__repo = 'musl')
                                            or (search_key__owner = 'opencv' and search_key__repo = 'opencv')
                                            or (search_key__owner = 'openssl' and search_key__repo = 'openssl')
                                            or (search_key__owner = 'openzfs' and search_key__repo = 'zfs')
                                            or (search_key__owner = 'google' and search_key__repo = 'snappy')
                                            or (search_key__owner = 'videolan' and search_key__repo = 'x265')
                                            or (search_key__owner = 'madler' and search_key__repo = 'zlib')
                                            or (search_key__owner = 'facebook' and search_key__repo = 'zstd')
                                            or (search_key__owner = 'persona-id' and search_key__repo = 'persona-ios-sdk')
                                            or (search_key__owner = 'persona-id' and
                                                search_key__repo = 'persona-android-sdk')
                                            or (search_key__owner = 'WebAssembly' and search_key__repo = 'WASI')
                                            or (search_key__owner = 'WebAssembly' and search_key__repo = 'gc')
                                            or (search_key__owner = 'adoptium' and search_key__repo = 'temurin-build')
                                            or (search_key__owner = 'adoptium' and search_key__repo = 'aqa-tests')
                                            or (search_key__owner = 'adoptium' and search_key__repo = 'installer')
                                            or (search_key__owner = 'adoptium' and search_key__repo = 'containers')
                                            or (search_key__owner = 'openjdk' and search_key__repo = 'jdk')
                                            or (search_key__owner = 'codenotary' and search_key__repo = 'kube-notary')
                                            or (search_key__owner = 'codenotary' and search_key__repo = 'merkletree')
                                            or (search_key__owner = 'codenotary' and search_key__repo = 'immuproof')
                                            or (search_key__owner = 'codenotary' and search_key__repo = 'immudb')
                                            or (search_key__owner = 'codenotary' and search_key__repo = 'cas')
                                            or (search_key__owner = 'oVirt' and search_key__repo = 'ovirt-engine')
                                            or (search_key__owner = 'onap' and search_key__repo = 'sdc')
                                            or (search_key__owner = 'onap' and search_key__repo = 'multicloud-k8s')
                                            or (search_key__owner = 'onap' and search_key__repo = 'oom')
                                            or (search_key__owner = 'onap' and search_key__repo = 'ccsdk-cds')
                                            or (search_key__owner = 'onap' and search_key__repo = 'so')
                                         group by search_key__owner, search_key__repo, number) as b
                                        on github_issues_comments.search_key__owner = b.search_key__owner and
                                           github_issues_comments.search_key__repo = b.search_key__repo
                                            and github_issues_comments.search_key__number = b.number) as a
                             global
                             join (select a.github_id, a.email, b.company
                                   from github_id_email_map as a global
                                            join (
                                       (
-- huawei
                                           select *, toUnixTimestamp(now()) as timestamp, 'huawei' as company
                                           from (select email
                                                 from (select author_email as email
                                                       from gits
                                                       group by author_email
                                                       union all
                                                       select committer_email as email
                                                       from gits
                                                       group by committer_email)
                                                 group by email)
                                           where splitByChar('@', email)[2] = 'huawei.com'
                                              or splitByChar('@', email)[2] = 'hisilicon.com'
                                              or splitByChar('@', email)[2] = 'huawei.partners.com'
                                              or splitByChar('@', email)[2] = 'china.huawei.com'
                                              or splitByChar('@', email)[2] = 'notesmail.huawei.com'
                                              or splitByChar('@', email)[2] = 'ohos.com.cn'
                                              or email like '%huawei%'
                                              or email global in (select email
                                                                  from github_id_email_map
                                                                  where github_id global in
                                                                        (select id
                                                                         from github_profile
                                                                         where final_company_inferred_from_company = 'huawei'
                                                                         group by id)

                                                                  group by email)

                                           union all


--google
                                           select *, toUnixTimestamp(now()) as timestamp, 'google' as company
                                           from (select email
                                                 from (select author_email as email
                                                       from gits
                                                       group by author_email
                                                       union all
                                                       select committer_email as email
                                                       from gits
                                                       group by committer_email)
                                                 group by email)
                                           where splitByChar('@', email)[2] = 'android.com'
                                              or splitByChar('@', email)[2] = 'chrome.com'
                                              or splitByChar('@', email)[2] = 'chromium.org'
                                              or splitByChar('@', email)[2] = 'google.com'
                                              or splitByChar('@', email)[2] = 'tensorflow.org'
                                              or email like '%google%'
                                              or email global in (select email
                                                                  from github_id_email_map
                                                                  where github_id global in
                                                                        (select id
                                                                         from github_profile
                                                                         where final_company_inferred_from_company = 'google'
                                                                         group by id)

                                                                  group by email)

                                           union all

-- facebook
                                           select *, toUnixTimestamp(now()) as timestamp, 'meta' as company
                                           from (select email
                                                 from (select author_email as email
                                                       from gits
                                                       group by author_email
                                                       union all
                                                       select committer_email as email
                                                       from gits
                                                       group by committer_email)
                                                 group by email)
                                           where splitByChar('@', email)[2] = 'fb.com'
                                              or splitByChar('@', email)[2] = 'meta.com'
                                              or email like '%facebook%'
                                              or email global in (select email
                                                                  from github_id_email_map
                                                                  where github_id global in
                                                                        (select id
                                                                         from github_profile
                                                                         where final_company_inferred_from_company = 'facebook'
                                                                         group by id)

                                                                  group by email)

                                           union all

-- intel
                                           select *, toUnixTimestamp(now()) as timestamp, 'intel' as company
                                           from (select email
                                                 from (select author_email as email
                                                       from gits
                                                       group by author_email
                                                       union all
                                                       select committer_email as email
                                                       from gits
                                                       group by committer_email)
                                                 group by email)
                                           where splitByChar('@', email)[2] = 'intel.com'
                                              or email like '%intel%'
                                              or email global in (select email
                                                                  from github_id_email_map
                                                                  where github_id global in
                                                                        (select id
                                                                         from github_profile
                                                                         where final_company_inferred_from_company = 'intel'
                                                                         group by id)

                                                                  group by email)

                                           union all


-- redhat
                                           select *, toUnixTimestamp(now()) as timestamp, 'redhat' as company
                                           from (select email
                                                 from (select author_email as email
                                                       from gits
                                                       group by author_email
                                                       union all
                                                       select committer_email as email
                                                       from gits
                                                       group by committer_email)
                                                 group by email)
                                           where splitByChar('@', email)[2] = 'redhat.com'
                                              or email like '%redhat%'
                                              or email global in (select email
                                                                  from github_id_email_map
                                                                  where github_id global in
                                                                        (select id
                                                                         from github_profile
                                                                         where final_company_inferred_from_company = 'red hat'
                                                                         group by id)

                                                                  group by email)

                                           union all
--amd
                                           select *, toUnixTimestamp(now()) as timestamp, 'amd' as company
                                           from (select email
                                                 from (select author_email as email
                                                       from gits
                                                       group by author_email
                                                       union all
                                                       select committer_email as email
                                                       from gits
                                                       group by committer_email)
                                                 group by email)
                                           where splitByChar('@', email)[2] = 'amd.com'
                                              or email global in (select email
                                                                  from github_id_email_map
                                                                  where github_id global in
                                                                        (select id
                                                                         from github_profile
                                                                         where final_company_inferred_from_company = 'amd'
                                                                         group by id)

                                                                  group by email)
                                           union all
--  amazon
                                           select *, toUnixTimestamp(now()) as timestamp, 'amazon' as company
                                           from (select email
                                                 from (select author_email as email
                                                       from gits
                                                       group by author_email
                                                       union all
                                                       select committer_email as email
                                                       from gits
                                                       group by committer_email)
                                                 group by email)
                                           where splitByChar('@', email)[2] = 'amazon.com'
                                              or email like '%amazon%'
                                              or email global in (select email
                                                                  from github_id_email_map
                                                                  where github_id != 0
                                                                    and github_id global in
                                                                        (select id
                                                                         from github_profile
                                                                         where final_company_inferred_from_company = 'amazon'
                                                                         group by id)

                                                                  group by email))) as b on a.email = b.email) as b
                                  on a.user__id = b.github_id
                    group by search_key__owner, search_key__repo, year, company
                    order by search_key__owner, search_key__repo, year, pr_comment_count desc) as b
                   on a.search_key__owner = b.search_key__owner
                       and a.search_key__repo = b.search_key__repo
                        and a.company = b.company and a.year = b.year
order by owner,repo,year,company












--linux maintainer 公司
select final_company_inferred_from_company, name,email
from (select author__id, commit__author__email, final_company_inferred_from_company
      from (select author__id, commit__author__email
            from (select *
                  from (select author__id, commit__author__email
                        from (select author__id, commit__author__email
                              from github_commits
                              group by author__id, commit__author__email
                              union all
                              select committer__id, commit__committer__email
                              from github_commits
                              group by committer__id, commit__committer__email)
                        group by author__id, commit__author__email)
                  where author__id != 0) as a global
                     join (select name, email from linux_maintainer group by name, email) as b
                          on a.commit__author__email = b.email) a global
               join github_profile as b
                    on a.author__id = b.id
      where final_company_inferred_from_company != '') as a global
         join (select name, email from linux_maintainer group by name, email) as b on a.commit__author__email = b.email
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
---linux kernel maintainer 按照email domain 和profile 推测maintainer 公司       
         
         
         
         
select module,name,email,company,final_company_inferred_from_company,1 as infered_from_email_domain_and_profile from
                                                                         (
                                                                             select module_ as module, name_ as name, email_ as email,'huawei' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
where splitByChar('@', email)[2] = 'huawei.com'
                                              or splitByChar('@', email)[2] = 'hisilicon.com'
                                              or splitByChar('@', email)[2] = 'huawei.partners.com'
                                              or splitByChar('@', email)[2] = 'china.huawei.com'
                                              or splitByChar('@', email)[2] = 'notesmail.huawei.com'
                                              or splitByChar('@', email)[2] = 'ohos.com.cn'
                                              or email like '%huawei%'

union all

select module_ as module, name_ as name, email_ as email,'google' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
where splitByChar('@', email)[2] = 'android.com'
                                              or splitByChar('@', email)[2] = 'chrome.com'
                                              or splitByChar('@', email)[2] = 'chromium.org'
                                              or splitByChar('@', email)[2] = 'google.com'
                                              or splitByChar('@', email)[2] = 'tensorflow.org'
                                              or email like '%google%'


union all

select module_ as module, name_ as name, email_ as email,'meta' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
 where splitByChar('@', email)[2] = 'fb.com'
                                              or splitByChar('@', email)[2] = 'meta.com'
                                              or email like '%facebook%'

union all

select module_ as module, name_ as name, email_ as email,'intel' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
where splitByChar('@', email)[2] = 'intel.com'
                                              or email like '%intel%'

union all

select module_ as module, name_ as name, email_ as email,'redhat' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
   where splitByChar('@', email)[2] = 'redhat.com'
                                              or email like '%redhat%'


union all

select module_ as module, name_ as name, email_ as email,'amd' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'amd.com'

union all

select module_ as module, name_ as name, email_ as email,'amazon' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'amazon.com'
                                              or email like '%amazon%'


union all

select module_ as module, name_ as name, email_ as email,'pengutronix' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'pengutronix.de'
                                              or email like '%pengutronix%'


union all

select module_ as module, name_ as name, email_ as email,'alibaba' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where
                                               email like '%alibaba%'


union all

select module_ as module, name_ as name, email_ as email,'arm' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'arm.com'


union all

select module_ as module, name_ as name, email_ as email,'baylibre' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'baylibre.com'
                                              or email like '%baylibre%'

union all

select module_ as module, name_ as name, email_ as email,'canonical' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'canonical.com'
                                              or email like '%canonical%'

union all

select module_ as module, name_ as name, email_ as email,'collabora' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'collabora.com'
                                              or email like '%collabora%'

union all

select module_ as module, name_ as name, email_ as email,'hpe' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'hpe.com'

union all

select module_ as module, name_ as name, email_ as email,'ibm' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where endsWith(splitByChar('@', email)[2],'ibm.com')

union all

select module_ as module, name_ as name, email_ as email,'linaro' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'linaro.org'
                                              or email like '%linaro%'

union all

select module_ as module, name_ as name, email_ as email,'mediatek' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'mediatek.com'
                                              or email like '%mediatek%'

union all

select module_ as module, name_ as name, email_ as email,'marvell' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'marvell.com'
                                              or email like '%marvell%'

union all

select module_ as module, name_ as name, email_ as email,'microsoft' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'microsoft.com'
                                              or email like '%microsoft%'

union all

select module_ as module, name_ as name, email_ as email,'nvidia' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'nvidia.com'
                                              or email like '%nvidia%'

union all

select module_ as module, name_ as name, email_ as email,'nxp' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'nxp.com'


union all

select module_ as module, name_ as name, email_ as email,'oracle' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'oracle.com'
                                              or email like '%oracle%'

union all

select module_ as module, name_ as name, email_ as email,'samsung' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'samsung.com'
                                              or email like '%samsung%'

union all

select module_ as module, name_ as name, email_ as email,'sifive' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'sifive.com'
                                              or email like '%sifive%'

union all

select module_ as module, name_ as name, email_ as email,'suse' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'suse.com'
                                              or email like '%suse%'

union all

select module_ as module, name_ as name, email_ as email,'vmware' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'vmware.com'
                                              or email like '%vmware%'

union all

select module_ as module, name_ as name, email_ as email,'western digital' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'wdc.com'


union all

select module_ as module, name_ as name, email_ as email,'windriver' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'windriver.com'
                                              or email like '%windriver%'

union all

select module_ as module, name_ as name, email_ as email,'xilinx' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'xilinx.com'
                                              or email like '%xilinx%') as a global left join (select email,final_company_inferred_from_company from (select a.module_ as module,name_ as name,email,final_company_inferred_from_company from (select argMax(module, update_at_timestamp) as module_,
       argMax(name, update_at_timestamp)   as name_,
       argMax(email, update_at_timestamp)  as email_
from linux_maintainer
group by module, name, email) as a global join (select final_company_inferred_from_company, email
from (select author__id, commit__author__email, final_company_inferred_from_company
      from (select author__id, commit__author__email
            from (select *
                  from (select author__id, commit__author__email
                        from (select author__id, commit__author__email
                              from github_commits
                              group by author__id, commit__author__email
                              union all
                              select committer__id, commit__committer__email
                              from github_commits
                              group by committer__id, commit__committer__email)
                        group by author__id, commit__author__email)
                  where author__id != 0) as a global
                     join (select name, email from linux_maintainer group by name, email) as b
                          on a.commit__author__email = b.email) a global
               join github_profile as b
                    on a.author__id = b.id
      where final_company_inferred_from_company != '') as a global
         join (select name, email from linux_maintainer group by name, email) as b on a.commit__author__email = b.email
group by final_company_inferred_from_company, email) as b on a.email_ = b.email order by final_company_inferred_from_company)
         where email global in
               (select email from
                                 (select module_ as module, name_ as name, email_ as email,'huawei' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
where splitByChar('@', email)[2] = 'huawei.com'
                                              or splitByChar('@', email)[2] = 'hisilicon.com'
                                              or splitByChar('@', email)[2] = 'huawei.partners.com'
                                              or splitByChar('@', email)[2] = 'china.huawei.com'
                                              or splitByChar('@', email)[2] = 'notesmail.huawei.com'
                                              or splitByChar('@', email)[2] = 'ohos.com.cn'
                                              or email like '%huawei%'

union all

select module_ as module, name_ as name, email_ as email,'google' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
where splitByChar('@', email)[2] = 'android.com'
                                              or splitByChar('@', email)[2] = 'chrome.com'
                                              or splitByChar('@', email)[2] = 'chromium.org'
                                              or splitByChar('@', email)[2] = 'google.com'
                                              or splitByChar('@', email)[2] = 'tensorflow.org'
                                              or email like '%google%'


union all

select module_ as module, name_ as name, email_ as email,'meta' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
 where splitByChar('@', email)[2] = 'fb.com'
                                              or splitByChar('@', email)[2] = 'meta.com'
                                              or email like '%facebook%'

union all

select module_ as module, name_ as name, email_ as email,'intel' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
where splitByChar('@', email)[2] = 'intel.com'
                                              or email like '%intel%'

union all

select module_ as module, name_ as name, email_ as email,'redhat' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
   where splitByChar('@', email)[2] = 'redhat.com'
                                              or email like '%redhat%'


union all

select module_ as module, name_ as name, email_ as email,'amd' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'amd.com'

union all

select module_ as module, name_ as name, email_ as email,'amazon' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'amazon.com'
                                              or email like '%amazon%'


union all

select module_ as module, name_ as name, email_ as email,'pengutronix' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'pengutronix.de'
                                              or email like '%pengutronix%'


union all

select module_ as module, name_ as name, email_ as email,'alibaba' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where
                                               email like '%alibaba%'


union all

select module_ as module, name_ as name, email_ as email,'arm' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'arm.com'


union all

select module_ as module, name_ as name, email_ as email,'baylibre' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'baylibre.com'
                                              or email like '%baylibre%'

union all

select module_ as module, name_ as name, email_ as email,'canonical' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'canonical.com'
                                              or email like '%canonical%'

union all

select module_ as module, name_ as name, email_ as email,'collabora' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'collabora.com'
                                              or email like '%collabora%'

union all

select module_ as module, name_ as name, email_ as email,'hpe' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'hpe.com'

union all

select module_ as module, name_ as name, email_ as email,'ibm' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where endsWith(splitByChar('@', email)[2],'ibm.com')

union all

select module_ as module, name_ as name, email_ as email,'linaro' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'linaro.org'
                                              or email like '%linaro%'

union all

select module_ as module, name_ as name, email_ as email,'mediatek' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'mediatek.com'
                                              or email like '%mediatek%'

union all

select module_ as module, name_ as name, email_ as email,'marvell' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'marvell.com'
                                              or email like '%marvell%'

union all

select module_ as module, name_ as name, email_ as email,'microsoft' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'microsoft.com'
                                              or email like '%microsoft%'

union all

select module_ as module, name_ as name, email_ as email,'nvidia' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'nvidia.com'
                                              or email like '%nvidia%'

union all

select module_ as module, name_ as name, email_ as email,'nxp' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'nxp.com'


union all

select module_ as module, name_ as name, email_ as email,'oracle' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'oracle.com'
                                              or email like '%oracle%'

union all

select module_ as module, name_ as name, email_ as email,'samsung' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'samsung.com'
                                              or email like '%samsung%'

union all

select module_ as module, name_ as name, email_ as email,'sifive' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'sifive.com'
                                              or email like '%sifive%'

union all

select module_ as module, name_ as name, email_ as email,'suse' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'suse.com'
                                              or email like '%suse%'

union all

select module_ as module, name_ as name, email_ as email,'vmware' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'vmware.com'
                                              or email like '%vmware%'

union all

select module_ as module, name_ as name, email_ as email,'western digital' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'wdc.com'


union all

select module_ as module, name_ as name, email_ as email,'windriver' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'windriver.com'
                                              or email like '%windriver%'

union all

select module_ as module, name_ as name, email_ as email,'xilinx' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'xilinx.com'
                                              or email like '%xilinx%') group by email) group by email,final_company_inferred_from_company) as b on a.email = b.email


union all
select module,name,email,final_company_inferred_from_company as company,final_company_inferred_from_company,0 as infered_from_email_domain_and_profile from (select a.module_ as module,name_ as name,email,final_company_inferred_from_company from (select argMax(module, update_at_timestamp) as module_,
       argMax(name, update_at_timestamp)   as name_,
       argMax(email, update_at_timestamp)  as email_
from linux_maintainer
group by module, name, email) as a global join (select final_company_inferred_from_company, email
from (select author__id, commit__author__email, final_company_inferred_from_company
      from (select author__id, commit__author__email
            from (select *
                  from (select author__id, commit__author__email
                        from (select author__id, commit__author__email
                              from github_commits
                              group by author__id, commit__author__email
                              union all
                              select committer__id, commit__committer__email
                              from github_commits
                              group by committer__id, commit__committer__email)
                        group by author__id, commit__author__email)
                  where author__id != 0) as a global
                     join (select name, email from linux_maintainer group by name, email) as b
                          on a.commit__author__email = b.email) a global
               join github_profile as b
                    on a.author__id = b.id
      where final_company_inferred_from_company != '') as a global
         join (select name, email from linux_maintainer group by name, email) as b on a.commit__author__email = b.email
group by final_company_inferred_from_company, email) as b on a.email_ = b.email order by final_company_inferred_from_company)
         where email global not in
               (select email from
                                 (select module_ as module, name_ as name, email_ as email,'huawei' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
where splitByChar('@', email)[2] = 'huawei.com'
                                              or splitByChar('@', email)[2] = 'hisilicon.com'
                                              or splitByChar('@', email)[2] = 'huawei.partners.com'
                                              or splitByChar('@', email)[2] = 'china.huawei.com'
                                              or splitByChar('@', email)[2] = 'notesmail.huawei.com'
                                              or splitByChar('@', email)[2] = 'ohos.com.cn'
                                              or email like '%huawei%'

union all

select module_ as module, name_ as name, email_ as email,'google' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
where splitByChar('@', email)[2] = 'android.com'
                                              or splitByChar('@', email)[2] = 'chrome.com'
                                              or splitByChar('@', email)[2] = 'chromium.org'
                                              or splitByChar('@', email)[2] = 'google.com'
                                              or splitByChar('@', email)[2] = 'tensorflow.org'
                                              or email like '%google%'


union all

select module_ as module, name_ as name, email_ as email,'meta' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
 where splitByChar('@', email)[2] = 'fb.com'
                                              or splitByChar('@', email)[2] = 'meta.com'
                                              or email like '%facebook%'

union all

select module_ as module, name_ as name, email_ as email,'intel' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
where splitByChar('@', email)[2] = 'intel.com'
                                              or email like '%intel%'

union all

select module_ as module, name_ as name, email_ as email,'redhat' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
   where splitByChar('@', email)[2] = 'redhat.com'
                                              or email like '%redhat%'


union all

select module_ as module, name_ as name, email_ as email,'amd' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'amd.com'

union all

select module_ as module, name_ as name, email_ as email,'amazon' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'amazon.com'
                                              or email like '%amazon%'


union all

select module_ as module, name_ as name, email_ as email,'pengutronix' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'pengutronix.de'
                                              or email like '%pengutronix%'


union all

select module_ as module, name_ as name, email_ as email,'alibaba' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where
                                               email like '%alibaba%'


union all

select module_ as module, name_ as name, email_ as email,'arm' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'arm.com'


union all

select module_ as module, name_ as name, email_ as email,'baylibre' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'baylibre.com'
                                              or email like '%baylibre%'

union all

select module_ as module, name_ as name, email_ as email,'canonical' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'canonical.com'
                                              or email like '%canonical%'

union all

select module_ as module, name_ as name, email_ as email,'collabora' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'collabora.com'
                                              or email like '%collabora%'

union all

select module_ as module, name_ as name, email_ as email,'hpe' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'hpe.com'

union all

select module_ as module, name_ as name, email_ as email,'ibm' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where endsWith(splitByChar('@', email)[2],'ibm.com')

union all

select module_ as module, name_ as name, email_ as email,'linaro' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'linaro.org'
                                              or email like '%linaro%'

union all

select module_ as module, name_ as name, email_ as email,'mediatek' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'mediatek.com'
                                              or email like '%mediatek%'

union all

select module_ as module, name_ as name, email_ as email,'marvell' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'marvell.com'
                                              or email like '%marvell%'

union all

select module_ as module, name_ as name, email_ as email,'microsoft' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'microsoft.com'
                                              or email like '%microsoft%'

union all

select module_ as module, name_ as name, email_ as email,'nvidia' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'nvidia.com'
                                              or email like '%nvidia%'

union all

select module_ as module, name_ as name, email_ as email,'nxp' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'nxp.com'


union all

select module_ as module, name_ as name, email_ as email,'oracle' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'oracle.com'
                                              or email like '%oracle%'

union all

select module_ as module, name_ as name, email_ as email,'samsung' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'samsung.com'
                                              or email like '%samsung%'

union all

select module_ as module, name_ as name, email_ as email,'sifive' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'sifive.com'
                                              or email like '%sifive%'

union all

select module_ as module, name_ as name, email_ as email,'suse' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'suse.com'
                                              or email like '%suse%'

union all

select module_ as module, name_ as name, email_ as email,'vmware' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'vmware.com'
                                              or email like '%vmware%'

union all

select module_ as module, name_ as name, email_ as email,'western digital' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'wdc.com'


union all

select module_ as module, name_ as name, email_ as email,'windriver' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'windriver.com'
                                              or email like '%windriver%'

union all

select module_ as module, name_ as name, email_ as email,'xilinx' as company
from (select argMax(module, update_at_timestamp) as module_,
             argMax(name, update_at_timestamp)   as name_,
             argMax(email, update_at_timestamp)  as email_
      from linux_maintainer
      group by module, name, email)
                                           where splitByChar('@', email)[2] = 'xilinx.com'
                                              or email like '%xilinx%') group by email)
                                              
                                              






















-- 先跑了email_main_tz_map中间表获取程序,从email_main_tz_map解析出来主要贡献是中国的邮箱,过滤掉[bot],通过github commit 找到github id,再找到profile,聚合每个邮箱下更改的文件,以及每个文件更改行数,将修改文件的filename(a=>b)修改成b 而正链表
select a.*, b.dir_or_file, total_lines, total_insertions, total_delations, alter_file_count
from (select *
      from (select a.*, b.final_company_inferred_from_company, location
            from (select a.*, b.author__id, author__login
                  from (select a.*, b.top_n_tz_area
                        from (select search_key__owner, search_key__repo, author_email, count() as commit_count
                              from gits
                              where if_merged = 0
                                and search_key__owner = 'ray-project'
                                and search_key__repo = 'ray'
                                and author_email != ''
                                and author_email not like '%[bot]%'
                              group by search_key__owner, search_key__repo, author_email) as a global
                                 join (select * from email_main_tz_map where main_tz_area = '中国') as b
                                      on a.author_email = b.email
                        order by search_key__owner, search_key__repo, commit_count desc) as a global
                           left join (select commit__author__email, author__id, author__login
                                      from github_commits
                                      group by commit__author__email, author__id, author__login)
                      as b on a.author_email = b.commit__author__email) as a global
                     left join (select id, final_company_inferred_from_company, location from github_profile) as b
                               on a.author__id = b.id)
      limit 20) as a global
         left join (select search_key__owner,
                           search_key__repo,
                           author_email,
                           arrayStringConcat(dir_name_or_file_name, '/') dir_or_file,
                           total_lines,
                           total_insertions,
                           total_delations,
                           alter_file_count
                    from (select search_key__owner,
                                 search_key__repo,
                                 author_email,
                                 dir_name_or_file_name,
                                 sum(lines)      as total_lines,
                                 sum(insertions) as total_insertions,
                                 sum(deletions)  as total_delations,
                                 count()         as alter_file_count
                          from (select *,
                                       splitByChar('/', file_name) as split_file_name,
                                       length(split_file_name)     as split_file_name_len,
                                       multiIf(split_file_name_len = 1, split_file_name, split_file_name_len = 2,
                                               arraySlice(split_file_name, 1, 1),
                                               split_file_name_len > 2, arraySlice(split_file_name, 1, 2),
                                               split_file_name)    as dir_name_or_file_name
                                from (select search_key__owner,
                                             search_key__repo,
                                             author_email,
                                             author_name,
                                             if(`files.file_name` like '%=>%',
                                                replace(replaceRegexpAll(`files.file_name`, '\\{[^{}]*=> ', ''), '}',
                                                        ''),
                                                `files.file_name`)
                                                                as file_name,
                                             `files.lines`      as lines,
                                             `files.insertions` as insertions,
                                             `files.deletions`  as deletions
                                      from gits array join `files.file_name`, `files.lines`, `files.insertions`, `files.deletions`
                                      where search_key__owner = 'ray-project'
                                        and search_key__repo = 'ray'
                                        and if_merged = 0)
                                   )
                          group by search_key__owner, search_key__repo, author_email, dir_name_or_file_name)) as b
                   on a.author_email = b.author_email and a.search_key__owner = b.search_key__owner and
                      a.search_key__repo = b.search_key__repo
order by commit_count desc, total_lines desc, total_insertions desc, total_delations desc;














--------------------------------------------------------------------------------------------------------------------------------------------------------------------

这个查的是个人信息
表头
search_key__owner,search_key__repo,author__id,emails,areas,author__login,company,final_company_inferred_from_company,location,commit_count,total_lines,total_insertions,total_deletions,total_files,repo_total_lines,repo_total_insertions,repo_total_deletions,repo_total_files,lines_percentage(%),insertions_percentage(%),deletions_percentage(%),alter_files_percentage(%)



select *,
       round(total_lines / repo_total_lines * 100, 3) as        `lines_percentage(%)`,
       round(total_insertions / repo_total_insertions * 100, 3) `insertions_percentage(%)`,
       round(total_deletions / repo_total_deletions * 100, 3) `deletions_percentage(%)`,
       round(total_files / repo_total_files * 100, 3) `alter_files_percentage(%)`
from (select search_key__owner,
       search_key__repo,
       author__id,
       groupArray(author_email) as emails,
       groupArray(top_n_tz_area) as areas,
       author__login,
       company,
       final_company_inferred_from_company,
       location,
       sum(commit_count) as commit_count,
       sum(total_lines) total_lines,
       sum(total_insertions) total_insertions,
       sum(total_deletions) total_deletions,
       sum(total_files) total_files
from (select * from (select a.*, b.total_lines, b.total_insertions, b.total_deletions, b.total_files
      from (select *
            from (select *
                  from (select a.*, b.final_company_inferred_from_company, location,company
                        from (select a.*, b.author__id, author__login
                              from (select a.*, b.top_n_tz_area
                                    from (select search_key__owner,
                                                 search_key__repo,
                                                 author_email,
                                                 count() as commit_count
                                          from gits
                                          where length(parents)==1
                                            and search_key__owner = 'huggingface'
                                            and search_key__repo = 'transformers'
                                            and author_email != ''
                                            and author_email not like '%[bot]%'
                                          group by search_key__owner, search_key__repo, author_email) as a global
                                             join (select email,argMax(top_n_tz_area,update_at_timestamp) as top_n_tz_area  from email_main_tz_map group by email) as b
                                                  on a.author_email = b.email
                                    order by search_key__owner, search_key__repo, commit_count desc) as a global
                                       left join (select commit__author__email, author__id, author__login
                                                  from github_commits
                                                  group by commit__author__email, author__id, author__login)
                                  as b on a.author_email = b.commit__author__email) as a global
                                 left join (select id, final_company_inferred_from_company, location,company
                                            from github_profile group by id, final_company_inferred_from_company, location,company) as b
                                           on a.author__id = b.id)
                  )) as a global
               join (select author_email,
                            sum(total__lines)      as total_lines,
                            sum(total__insertions) as total_insertions,
                            sum(total__deletions)     total_deletions,
                            sum(total__files)         total_files
                     from gits
                     where search_key__owner = 'huggingface'
                       and search_key__repo = 'transformers'
                       and length(parents)==1
                     group by author_email) as b on a.author_email = b.author_email)) where author__id != 0
group by search_key__owner, search_key__repo, author__id, author__login, final_company_inferred_from_company, location   ,company
order by commit_count desc) as a global
         left join (select sum(total__lines) as repo_total_lines, sum(total__insertions) as repo_total_insertions,sum(total__deletions) repo_total_deletions,sum(total__files) repo_total_files
                    from gits
                    where search_key__owner = 'huggingface'
                      and search_key__repo = 'transformers'
    ) as b on 1 = 1
    
    
    
    
    
 
 
 
 
 通过邮箱找到github帐号关联的其他邮箱
 select commit__author__email,commit__author__name from (select author__id, commit__author__email, commit__author__name
from (select author__id, commit__author__email, commit__author__name
      from github_commits
      where search_key__owner = 'kubernetes'
        and search_key__repo = 'kubernetes'
        and commit__author__email not like '%users.noreply.github.com%'
      group by author__id, commit__author__email, commit__author__name
      union all

      select committer__id, commit__committer__email, commit__committer__name
      from github_commits
      where search_key__owner = 'kubernetes'
        and search_key__repo = 'kubernetes'
        and commit__committer__email not like '%users.noreply.github.com%'
      group by committer__id, commit__committer__email, commit__committer__name)
group by author__id, commit__author__email, commit__author__name
order by commit__author__name,commit__author__email) where author__id global in (select author__id from (select author__id, commit__author__email, commit__author__name
from (select author__id, commit__author__email, commit__author__name
      from github_commits
      where search_key__owner = 'kubernetes'
        and search_key__repo = 'kubernetes'
        and commit__author__email not like '%users.noreply.github.com%'
      group by author__id, commit__author__email, commit__author__name
      union all

      select committer__id, commit__committer__email, commit__committer__name
      from github_commits
      where search_key__owner = 'kubernetes'
        and search_key__repo = 'kubernetes'
        and commit__committer__email not like '%users.noreply.github.com%'
      group by committer__id, commit__committer__email, commit__committer__name)
group by author__id, commit__author__email, commit__author__name
order by commit__author__name,commit__author__email) where commit__author__email = 'nickren19@gmail.com' and author__id !=0)



























---------------------------------------------------------------------------------------------

开发者在加入社区第一年，同行的平均贡献强度
select search_key__owner,
       search_key__repo,
       dep_author_email,
       start_at,
       count()                               as commit_count,
       count(distinct all_author_email)      as author_count,
       round(commit_count / author_count, 2) as average_fix_intensity
from (select *
      from (select a.search_key__owner,
                   a.search_key__repo,
                   a.author_email as all_author_email,
                   a.authored_date,
                   b.author_email as dep_author_email,
                   b.commit_count,
                   b.start_at,
                   b.end_at
            from (select *
                  from gits
                  where search_key__owner = 'rust-lang'
                    and search_key__repo != 'llvm-project'
                    and search_key__repo != 'llvm'
                    and search_key__repo != 'rust-gha'
                    and length(parents) == 1
                    and author_email != '') as a global
                     JOIN (select author_email,
                                  search_key__owner,
                                  search_key__repo,
                                  start_at,
                                  end_at,
                                  count() as commit_count,
                                  ln(commit_count + 1)
                           from (select search_key__owner, search_key__repo, author_email, authored_date, b.*
                                 from (select *
                                       from gits
                                       where search_key__owner = 'rust-lang'
                                         and search_key__repo != 'llvm-project'
                                         and search_key__repo != 'llvm'
                                         and search_key__repo != 'rust-gha'
                                         and length(parents) == 1
                                         and author_email != '') as a global ASOF
                                          inner JOIN (select author_email,
                                                             min(authored_date)          as start_at,
                                                             subtractYears(start_at, -1) as end_at
                                                      from gits
                                                      where search_key__owner = 'rust-lang'
                                                        and search_key__repo != 'llvm-project'
                                                        and search_key__repo != 'llvm'
                                                        and search_key__repo != 'rust-gha'
                                                        and length(parents) == 1
                                                        and author_email != ''
                                                      and author_email not like '%[bot]%'
                                                      group by author_email) as b
                                                     on a.author_email = b.author_email and a.authored_date <= end_at)
                           group by author_email, search_key__owner, search_key__repo, start_at, end_at
                           having commit_count > 5
                           order by author_email, start_at, commit_count desc
                           limit 1 by author_email) as b
                          on a.search_key__owner = b.search_key__owner and
                             a.search_key__repo = b.search_key__repo)
      where authored_date >= start_at
        and authored_date <= end_at
        and all_author_email != dep_author_email
        and all_author_email not like '%[bot]%'
      order by start_at)
group by search_key__owner, search_key__repo, dep_author_email, start_at








-- 中国开发者的贡献时间线还有整体的贡献

select new_login,
       search_key__owner,
       search_key__repo,
       author__id,
       author_name,
       author_email,
       authored_date,
       author_tz,
       email_domain,
       emails,
       lines,
       insertions,
       deletions,
       files,
       commit_count,
       month_commit_count,
       commit_month_count,
       tz_commit_count_map,
       company,
       final_company_inferred_from_company,
       location,
       inferred_from_location__country,
       blog
from (select *
      from (-- llvm 与中国沾边的所有开发着贡献时间线
               select new_login, a.*
               from (select search_key__owner,
                            search_key__repo,
                            author__id,
                            author_name,
                            author_email,
                            authored_date,
                            author_tz,
                            email_domain
                     from (select a.*, b.author__id
                           from (select *, splitByChar('@', author_email)[2] as email_domain
                                 from gits
                                 where search_key__repo = '{owner}'
                                   and search_key__repo = '{repo}'
                                   and length(parents) == 1) as a
                                    -- 这里使用global join 产生的效果是只显示能对得出账号的commit数据
                                    global
                                    join (select commit__author__email, author__id
                                          from github_commits
                                          where search_key__repo = '{owner}'
                                            and search_key__repo = '{repo}'
                                            and author__id != 0
                                          group by commit__author__email, author__id) as b on
                               a.author_email = b.commit__author__email)
                     where author__id global in (-- 与中国沾边的id
                         select author__id
                         from (select a.*, b.inferred_from_location__country
                               from (select a.*, b.author__id
                                     from (select *, splitByChar('@', author_email)[2] as email_domain
                                           from gits
                                           where search_key__repo = '{owner}'
                                             and search_key__repo = '{repo}'
                                             and length(parents) == 1) as a global
                                              join (select commit__author__email, author__id
                                                    from github_commits
                                                    where search_key__repo = '{owner}'
                                                      and search_key__repo = '{repo}'
                                                      and author__id != 0
                                                    group by commit__author__email, author__id) as b on
                                         a.author_email = b.commit__author__email) as a global
                                        left join (select id, inferred_from_location__country, location
                                                   from github_profile
                                                   where github_profile.inferred_from_location__country = 'China') as b
                                                  on a.author__id = b.id)
                         where inferred_from_location__country != ''
                            or author_tz = 8
                            or email_domain global in ('baidu.com',
                                                       '163.com',
                                                       '126.com',
                                                       'qq.com',
                                                       'bytedance.com',
                                                       'huawei.com',
                                                       'xiaomi.com',
                                                       'alibaba-inc.com',
                                                       'linux.alibaba.com',
                                                       'alibaba.com',
                                                       'bytedance.com',
                                                       'streamcomputing.com',
                                                       'loongson.cn',
                                                       'iscas.ac.cn',
                                                       'tencent.com')
                            or email_domain like '%.cn'

                         group by author__id)
                     order by author__id, authored_date) as a global
                        left join (select search_key__owner,
                                          search_key__repo,
                                          author__id,
                                          argMax(author__login, commit__author__date) as new_login
                                   from github_commits
                                   where search_key__repo = '{owner}'
                                     and search_key__repo = '{repo}'
                                   group by search_key__owner, search_key__repo, author__id) as b
                                  on a.author__id = b.author__id and a.search_key__owner = b.search_key__owner and
                                     a.search_key__repo = b.search_key__repo) as a global
               left join (select a.*, tz_commit_count_map
                          from (select a.*, month_commit_count, commit_month_count
                                from (select search_key__owner,
                                             search_key__repo,
                                             author__id,
                                             groupArray(author_email) as emails,
                                             sum(lines)               as lines,
                                             sum(insertions)          as insertions,
                                             sum(deletions)           as deletions,
                                             sum(files)               as files,
                                             sum(commit_count)        as commit_count
                                      from (select search_key__owner,
                                                   search_key__repo,
                                                   author__id,
                                                   author_email,
                                                   sum(total__lines)      as lines,
                                                   sum(total__insertions) as insertions,
                                                   sum(total__deletions)  as deletions,
                                                   sum(total__files)      as files,
                                                   count()                as commit_count
                                            from (select search_key__owner,
                                                         search_key__repo,
                                                         author__id,
                                                         author_name,
                                                         author_email,
                                                         authored_date,
                                                         author_tz,
                                                         email_domain,
                                                         total__lines,
                                                         total__insertions,
                                                         total__deletions,
                                                         total__files
                                                  from (select a.*, b.author__id
                                                        from (select *, splitByChar('@', author_email)[2] as email_domain
                                                              from gits
                                                              where search_key__repo = '{owner}'
                                                                and search_key__repo = '{repo}'
                                                                and length(parents) == 1) as a
                                                                 -- 这里使用global join 产生的效果是只显示能对得出账号的commit数据
                                                                 global
                                                                 join (select commit__author__email, author__id
                                                                       from github_commits
                                                                       where search_key__repo = '{owner}'
                                                                         and search_key__repo = '{repo}'
                                                                         and author__id != 0
                                                                       group by commit__author__email, author__id) as b
                                                                      on
                                                                          a.author_email = b.commit__author__email)
                                                  where author__id global in (-- 与中国沾边的id
                                                      select author__id
                                                      from (select a.*, b.inferred_from_location__country
                                                            from (select a.*, b.author__id
                                                                  from (select *, splitByChar('@', author_email)[2] as email_domain
                                                                        from gits
                                                                        where search_key__repo = '{owner}'
                                                                          and search_key__repo = '{repo}'
                                                                          and length(parents) == 1) as a global
                                                                           join (select commit__author__email, author__id
                                                                                 from github_commits
                                                                                 where search_key__repo = '{owner}'
                                                                                   and search_key__repo = '{repo}'
                                                                                   and author__id != 0
                                                                                 group by commit__author__email, author__id) as b
                                                                                on
                                                                                    a.author_email = b.commit__author__email) as a global
                                                                     left join (select id, inferred_from_location__country, location
                                                                                from github_profile
                                                                                where github_profile.inferred_from_location__country = 'China') as b
                                                                               on a.author__id = b.id)
                                                      where inferred_from_location__country != ''
                                                         or author_tz = 8
                                                         or email_domain global in ('baidu.com',
                                                                                    '163.com',
                                                                                    '126.com',
                                                                                    'qq.com',
                                                                                    'bytedance.com',
                                                                                    'huawei.com',
                                                                                    'xiaomi.com',
                                                                                    'alibaba-inc.com',
                                                                                    'linux.alibaba.com',
                                                                                    'alibaba.com',
                                                                                    'bytedance.com',
                                                                                    'streamcomputing.com',
                                                                                    'loongson.cn',
                                                                                    'iscas.ac.cn',
                                                                                    'tencent.com')
                                                         or email_domain like '%.cn'

                                                      group by author__id)
                                                  order by author__id, authored_date)
                                            group by search_key__owner, search_key__repo, author__id, author_email)
                                      group by search_key__owner, search_key__repo, author__id) as a global
                                         join (select search_key__owner,
                                                      search_key__repo,
                                                      author__id,
                                                      count()                                 as commit_month_count,
                                                      groupArray((month, month_commit_count)) as month_commit_count
                                               from (select search_key__owner,
                                                            search_key__repo,
                                                            author__id,
                                                            toYYYYMM(authored_date) as month,
                                                            count()                 as month_commit_count
                                                     from (select search_key__owner,
                                                                  search_key__repo,
                                                                  author__id,
                                                                  author_name,
                                                                  author_email,
                                                                  authored_date,
                                                                  author_tz,
                                                                  email_domain,
                                                                  total__lines,
                                                                  total__insertions,
                                                                  total__deletions,
                                                                  total__files
                                                           from (select a.*, b.author__id
                                                                 from (select *, splitByChar('@', author_email)[2] as email_domain
                                                                       from gits
                                                                       where search_key__repo = '{owner}'
                                                                         and search_key__repo = '{repo}'
                                                                         and length(parents) == 1) as a
                                                                          -- 这里使用global join 产生的效果是只显示能对得出账号的commit数据
                                                                          global
                                                                          join (select commit__author__email, author__id
                                                                                from github_commits
                                                                                where search_key__repo = '{owner}'
                                                                                  and search_key__repo = '{repo}'
                                                                                  and author__id != 0
                                                                                group by commit__author__email, author__id) as b
                                                                               on
                                                                                   a.author_email = b.commit__author__email)
                                                           where author__id global in (-- 与中国沾边的id
                                                               select author__id
                                                               from (select a.*, b.inferred_from_location__country
                                                                     from (select a.*, b.author__id
                                                                           from (select *, splitByChar('@', author_email)[2] as email_domain
                                                                                 from gits
                                                                                 where search_key__repo = '{owner}'
                                                                                   and search_key__repo = '{repo}'
                                                                                   and length(parents) == 1) as a global
                                                                                    join (select commit__author__email, author__id
                                                                                          from github_commits
                                                                                          where search_key__repo = '{owner}'
                                                                                            and search_key__repo = '{repo}'
                                                                                            and author__id != 0
                                                                                          group by commit__author__email, author__id) as b
                                                                                         on
                                                                                             a.author_email = b.commit__author__email) as a global
                                                                              left join (select id, inferred_from_location__country, location
                                                                                         from github_profile
                                                                                         where github_profile.inferred_from_location__country = 'China') as b
                                                                                        on a.author__id = b.id)
                                                               where inferred_from_location__country != ''
                                                                  or author_tz = 8
                                                                  or email_domain global in ('baidu.com',
                                                                                             '163.com',
                                                                                             '126.com',
                                                                                             'qq.com',
                                                                                             'bytedance.com',
                                                                                             'huawei.com',
                                                                                             'xiaomi.com',
                                                                                             'alibaba-inc.com',
                                                                                             'linux.alibaba.com',
                                                                                             'alibaba.com',
                                                                                             'bytedance.com',
                                                                                             'streamcomputing.com',
                                                                                             'loongson.cn',
                                                                                             'iscas.ac.cn',
                                                                                             'tencent.com')
                                                                  or email_domain like '%.cn'

                                                               group by author__id)
                                                           order by author__id, authored_date)
                                                     group by search_key__owner, search_key__repo, author__id, month
                                                     order by author__id, month)
                                               group by search_key__owner, search_key__repo, author__id) as b
                                              on a.search_key__owner = b.search_key__owner and
                                                 a.search_key__repo = b.search_key__repo and
                                                 a.author__id = b.author__id) as a global
                                   join (select search_key__owner,
                                                search_key__repo,
                                                author__id,
                                                groupArray((author_tz, tz_commit_count)) tz_commit_count_map
                                         from (select search_key__owner,
                                                      search_key__repo,
                                                      author__id,
                                                      author_tz,
                                                      count() as tz_commit_count
                                               from (select search_key__owner,
                                                            search_key__repo,
                                                            author__id,
                                                            author_name,
                                                            author_email,
                                                            authored_date,
                                                            author_tz,
                                                            email_domain,
                                                            total__lines,
                                                            total__insertions,
                                                            total__deletions,
                                                            total__files
                                                     from (select a.*, b.author__id
                                                           from (select *, splitByChar('@', author_email)[2] as email_domain
                                                                 from gits
                                                                 where search_key__repo = '{owner}'
                                                                   and search_key__repo = '{repo}'
                                                                   and length(parents) == 1) as a
                                                                    -- 这里使用global join 产生的效果是只显示能对得出账号的commit数据
                                                                    global
                                                                    join (select commit__author__email, author__id
                                                                          from github_commits
                                                                          where search_key__repo = '{owner}'
                                                                            and search_key__repo = '{repo}'
                                                                            and author__id != 0
                                                                          group by commit__author__email, author__id) as b
                                                                         on
                                                                             a.author_email = b.commit__author__email)
                                                     where author__id global in (-- 与中国沾边的id
                                                         select author__id
                                                         from (select a.*, b.inferred_from_location__country
                                                               from (select a.*, b.author__id
                                                                     from (select *, splitByChar('@', author_email)[2] as email_domain
                                                                           from gits
                                                                           where search_key__repo = '{owner}'
                                                                             and search_key__repo = '{repo}'
                                                                             and length(parents) == 1) as a global
                                                                              join (select commit__author__email, author__id
                                                                                    from github_commits
                                                                                    where search_key__repo = '{owner}'
                                                                                      and search_key__repo = '{repo}'
                                                                                      and author__id != 0
                                                                                    group by commit__author__email, author__id) as b
                                                                                   on
                                                                                       a.author_email = b.commit__author__email) as a global
                                                                        left join (select id, inferred_from_location__country, location
                                                                                   from github_profile
                                                                                   where github_profile.inferred_from_location__country = 'China') as b
                                                                                  on a.author__id = b.id)
                                                         where inferred_from_location__country != ''
                                                            or author_tz = 8
                                                            or email_domain global in ('baidu.com',
                                                                                       '163.com',
                                                                                       '126.com',
                                                                                       'qq.com',
                                                                                       'bytedance.com',
                                                                                       'huawei.com',
                                                                                       'xiaomi.com',
                                                                                       'alibaba-inc.com',
                                                                                       'linux.alibaba.com',
                                                                                       'alibaba.com',
                                                                                       'bytedance.com',
                                                                                       'streamcomputing.com',
                                                                                       'loongson.cn',
                                                                                       'iscas.ac.cn',
                                                                                       'tencent.com')
                                                            or email_domain like '%.cn'
                                                         group by search_key__owner, search_key__repo, author__id)
                                                     order by author__id, authored_date)
                                               group by search_key__owner, search_key__repo, author__id, author_tz
                                               order by author__id, tz_commit_count desc)
                                         group by search_key__owner, search_key__repo, author__id) as b
                                        on a.author__id = b.author__id and a.search_key__owner = b.search_key__owner and
                                           a.search_key__repo = b.search_key__repo) as b
                         on a.author__id = b.author__id and a.search_key__owner = b.search_key__owner and
                            a.search_key__repo = b.search_key__repo
      order by author__id, authored_date) as a global
         left join (select id,
                           company,
                           final_company_inferred_from_company,
                           location,
                           inferred_from_location__country,
                           blog
                    from github_profile) as b on a.author__id = b.id;























-- 两个项目之间共同的开发者

-- 找到llvm pytorch 和rust三个项目之间，两者之间或者三者之间是否有开发者交叉贡献
select a.*,b.new_login from (select * from (select a.*, tz_commit_count_map
from (select a.*, month_commit_count, commit_month_count
      from (select search_key__owner,
                   search_key__repo,
                   author__id,
                   groupArray(author_email) as emails,
                   sum(lines)               as lines,
                   sum(insertions)          as insertions,
                   sum(deletions)           as deletions,
                   sum(files)               as files,
                   sum(commit_count)        as commit_count
            from (select search_key__owner,
                         search_key__repo,
                         author__id,
                         author_email,
                         sum(total__lines)      as lines,
                         sum(total__insertions) as insertions,
                         sum(total__deletions)  as deletions,
                         sum(total__files)      as files,
                         count()                as commit_count
                  from (select search_key__owner,
                               search_key__repo,
                               author__id,
                               author_name,
                               author_email,
                               authored_date,
                               author_tz,
                               email_domain,
                               total__lines,
                               total__insertions,
                               total__deletions,
                               total__files
                        from (select a.*, b.author__id
                              from (select *, splitByChar('@', author_email)[2] as email_domain
                                    from gits
                                    where search_key__owner = 'rust-lang'
                                      and search_key__repo = 'rust'
                                      and length(parents) == 1) as a
                                       -- 这里使用global join 产生的效果是只显示能对得出账号的commit数据
                                       global
                                       join (select commit__author__email, author__id
                                             from github_commits
                                    where search_key__owner = 'rust-lang'
                                      and search_key__repo = 'rust'
                                               and author__id != 0
                                             group by commit__author__email, author__id) as b
                                            on
                                                a.author_email = b.commit__author__email)
                        order by author__id, authored_date)
                  group by search_key__owner, search_key__repo, author__id, author_email)
            group by search_key__owner, search_key__repo, author__id) as a global
               join (select search_key__owner,
                            search_key__repo,
                            author__id,
                            count()                                 as commit_month_count,
                            groupArray((month, month_commit_count)) as month_commit_count
                     from (select search_key__owner,
                                  search_key__repo,
                                  author__id,
                                  toYYYYMM(authored_date) as month,
                                  count()                 as month_commit_count
                           from (select search_key__owner,
                                        search_key__repo,
                                        author__id,
                                        author_name,
                                        author_email,
                                        authored_date,
                                        author_tz,
                                        email_domain,
                                        total__lines,
                                        total__insertions,
                                        total__deletions,
                                        total__files
                                 from (select a.*, b.author__id
                                       from (select *, splitByChar('@', author_email)[2] as email_domain
                                             from gits
                                    where search_key__owner = 'rust-lang'
                                      and search_key__repo = 'rust'
                                               and length(parents) == 1) as a
                                                -- 这里使用global join 产生的效果是只显示能对得出账号的commit数据
                                                global
                                                join (select commit__author__email, author__id
                                                      from github_commits
                                    where search_key__owner = 'rust-lang'
                                      and search_key__repo = 'rust'
                                                        and author__id != 0
                                                      group by commit__author__email, author__id) as b
                                                     on
                                                         a.author_email = b.commit__author__email)
                                 order by author__id, authored_date)
                           group by search_key__owner, search_key__repo, author__id, month
                           order by author__id, month)
                     group by search_key__owner, search_key__repo, author__id) as b
                    on a.search_key__owner = b.search_key__owner and
                       a.search_key__repo = b.search_key__repo and
                       a.author__id = b.author__id) as a global
         join (select search_key__owner,
                      search_key__repo,
                      author__id,
                      groupArray((author_tz, tz_commit_count)) tz_commit_count_map
               from (select search_key__owner,
                            search_key__repo,
                            author__id,
                            author_tz,
                            count() as tz_commit_count
                     from (select search_key__owner,
                                  search_key__repo,
                                  author__id,
                                  author_name,
                                  author_email,
                                  authored_date,
                                  author_tz,
                                  email_domain,
                                  total__lines,
                                  total__insertions,
                                  total__deletions,
                                  total__files
                           from (select a.*, b.author__id
                                 from (select *, splitByChar('@', author_email)[2] as email_domain
                                       from gits
                                    where search_key__owner = 'rust-lang'
                                      and search_key__repo = 'rust'
                                         and length(parents) == 1) as a
                                          -- 这里使用global join 产生的效果是只显示能对得出账号的commit数据
                                          global
                                          join (select commit__author__email, author__id
                                                from github_commits
                                    where search_key__owner = 'rust-lang'
                                      and search_key__repo = 'rust'
                                                  and author__id != 0
                                                group by commit__author__email, author__id) as b
                                               on
                                                   a.author_email = b.commit__author__email)
                           order by author__id, authored_date)
                     group by search_key__owner, search_key__repo, author__id, author_tz
                     order by author__id, tz_commit_count desc)
               group by search_key__owner, search_key__repo, author__id) as b
              on a.author__id = b.author__id and a.search_key__owner = b.search_key__owner and
                 a.search_key__repo = b.search_key__repo) as a global join
    (select a.*, tz_commit_count_map
from (select a.*, month_commit_count, commit_month_count
      from (select search_key__owner,
                   search_key__repo,
                   author__id,
                   groupArray(author_email) as emails,
                   sum(lines)               as lines,
                   sum(insertions)          as insertions,
                   sum(deletions)           as deletions,
                   sum(files)               as files,
                   sum(commit_count)        as commit_count
            from (select search_key__owner,
                         search_key__repo,
                         author__id,
                         author_email,
                         sum(total__lines)      as lines,
                         sum(total__insertions) as insertions,
                         sum(total__deletions)  as deletions,
                         sum(total__files)      as files,
                         count()                as commit_count
                  from (select search_key__owner,
                               search_key__repo,
                               author__id,
                               author_name,
                               author_email,
                               authored_date,
                               author_tz,
                               email_domain,
                               total__lines,
                               total__insertions,
                               total__deletions,
                               total__files
                        from (select a.*, b.author__id
                              from (select *, splitByChar('@', author_email)[2] as email_domain
                                    from gits
                                    where search_key__owner = 'llvm'
                                      and search_key__repo = 'llvm-project'
                                      and length(parents) == 1) as a
                                       -- 这里使用global join 产生的效果是只显示能对得出账号的commit数据
                                       global
                                       join (select commit__author__email, author__id
                                             from github_commits
                                    where search_key__owner = 'llvm'
                                      and search_key__repo = 'llvm-project'
                                               and author__id != 0
                                             group by commit__author__email, author__id) as b
                                            on
                                                a.author_email = b.commit__author__email)
                        order by author__id, authored_date)
                  group by search_key__owner, search_key__repo, author__id, author_email)
            group by search_key__owner, search_key__repo, author__id) as a global
               join (select search_key__owner,
                            search_key__repo,
                            author__id,
                            count()                                 as commit_month_count,
                            groupArray((month, month_commit_count)) as month_commit_count
                     from (select search_key__owner,
                                  search_key__repo,
                                  author__id,
                                  toYYYYMM(authored_date) as month,
                                  count()                 as month_commit_count
                           from (select search_key__owner,
                                        search_key__repo,
                                        author__id,
                                        author_name,
                                        author_email,
                                        authored_date,
                                        author_tz,
                                        email_domain,
                                        total__lines,
                                        total__insertions,
                                        total__deletions,
                                        total__files
                                 from (select a.*, b.author__id
                                       from (select *, splitByChar('@', author_email)[2] as email_domain
                                             from gits
                                    where search_key__owner = 'llvm'
                                      and search_key__repo = 'llvm-project'
                                               and length(parents) == 1) as a
                                                -- 这里使用global join 产生的效果是只显示能对得出账号的commit数据
                                                global
                                                join (select commit__author__email, author__id
                                                      from github_commits
                                    where search_key__owner = 'llvm'
                                      and search_key__repo = 'llvm-project'
                                                        and author__id != 0
                                                      group by commit__author__email, author__id) as b
                                                     on
                                                         a.author_email = b.commit__author__email)
                                 order by author__id, authored_date)
                           group by search_key__owner, search_key__repo, author__id, month
                           order by author__id, month)
                     group by search_key__owner, search_key__repo, author__id) as b
                    on a.search_key__owner = b.search_key__owner and
                       a.search_key__repo = b.search_key__repo and
                       a.author__id = b.author__id) as a global
         join (select search_key__owner,
                      search_key__repo,
                      author__id,
                      groupArray((author_tz, tz_commit_count)) tz_commit_count_map
               from (select search_key__owner,
                            search_key__repo,
                            author__id,
                            author_tz,
                            count() as tz_commit_count
                     from (select search_key__owner,
                                  search_key__repo,
                                  author__id,
                                  author_name,
                                  author_email,
                                  authored_date,
                                  author_tz,
                                  email_domain,
                                  total__lines,
                                  total__insertions,
                                  total__deletions,
                                  total__files
                           from (select a.*, b.author__id
                                 from (select *, splitByChar('@', author_email)[2] as email_domain
                                       from gits
                                    where search_key__owner = 'llvm'
                                      and search_key__repo = 'llvm-project'
                                         and length(parents) == 1) as a
                                          -- 这里使用global join 产生的效果是只显示能对得出账号的commit数据
                                          global
                                          join (select commit__author__email, author__id
                                                from github_commits
                                    where search_key__owner = 'llvm'
                                      and search_key__repo = 'llvm-project'
                                                  and author__id != 0
                                                group by commit__author__email, author__id) as b
                                               on
                                                   a.author_email = b.commit__author__email)
                           order by author__id, authored_date)
                     group by search_key__owner, search_key__repo, author__id, author_tz
                     order by author__id, tz_commit_count desc)
               group by search_key__owner, search_key__repo, author__id) as b
              on a.author__id = b.author__id and a.search_key__owner = b.search_key__owner and
                 a.search_key__repo = b.search_key__repo) as b on a.author__id = b.author__id) as a global join (select author__id,
       argMax(author__login, commit__author__date) as new_login
from github_commits
group by author__id) as b on a.author__id = b.author__id









--- github profile linkedin



select emails, b.*
from (select id, groupArray(email) as emails
      from (select id, email
            from (select author__id as id, commit__author__email as email
                  from github_commits
                  where author__id != 0
                    and commit__author__email not like '%users.noreply.github.com'
                  group by author__id, commit__author__email
                  union all
                  select committer__id, commit__committer__email
                  from github_commits
                  where committer__id != 0
                    and commit__committer__email not like '%users.noreply.github.com'
                  group by committer__id, commit__committer__email
                  union all
                  select id, email
                  from github_profile
                  where email != ''
                  group by id, email
                     )
            group by id, email)
      group by id) as a global
         right join (select id, login, name, blog from github_profile where blog like '%linkedin%') as b on a.id = b.id




-- 筛选明星项目相关的其他项目



select a.*, b.pr_merge_count as repo_total_pr_merge_count
from (select payload__pull_request__base__repo__html_url,
             count()       as actor_count,
             sum(pr_count) as pr_count_in_refer_repo
      from (
               --贡献过llvm 代码的 github id 相关的gha中所有提过pr的项目，以及明星项目开发者对该项目被merge的次数
               select payload__pull_request__base__repo__html_url, actor__id, count() as pr_count
               from pull_request_event
               where actor__id global in (select id
                                          from (select author__id as id
                                                from github_commits
                                                where search_key__owner = 'llvm'
                                                  and search_key__repo = 'llvm-project'
                                                  and author__id != 0
                                                group by author__id
                                                union all
                                                select committer__id as id
                                                from github_commits
                                                where search_key__owner = 'llvm'
                                                  and search_key__repo = 'llvm-project'
                                                  and committer__id != 0
                                                group by committer__id)
                                          group by id)
                 and payload__pull_request__merged = 1
               group by payload__pull_request__base__repo__html_url, actor__id
               order by actor__id, pr_count desc)
      group by payload__pull_request__base__repo__html_url
      having actor_count > 1
         and pr_count_in_refer_repo > 1
      order by actor_count desc, pr_count_in_refer_repo desc) as a global
         left join (select payload__pull_request__base__repo__html_url, count() as pr_merge_count
                    from pull_request_event
                    where payload__pull_request__base__repo__html_url global in
                          (-- 把贡献过明星项目的开发者所贡献的其他项目地址获取（pr被merge大于一次的）
                              select payload__pull_request__base__repo__html_url
                              from (select payload__pull_request__base__repo__html_url,
                                           count()       as actor_count,
                                           sum(pr_count) as total_pr_count
                                    from (select payload__pull_request__base__repo__html_url,
                                                 actor__id,
                                                 count() as pr_count
                                          from pull_request_event
                                          where actor__id global in (select id
                                                                     from (select author__id as id
                                                                           from github_commits
                                                                           where search_key__owner = 'llvm'
                                                                             and search_key__repo = 'llvm-project'
                                                                             and author__id != 0
                                                                           group by author__id
                                                                           union all
                                                                           select committer__id as id
                                                                           from github_commits
                                                                           where search_key__owner = 'llvm'
                                                                             and search_key__repo = 'llvm-project'
                                                                             and committer__id != 0
                                                                           group by committer__id)
                                                                     group by id)
                                            and payload__pull_request__merged = 1
                                          group by payload__pull_request__base__repo__html_url, actor__id
                                          order by actor__id, pr_count desc)
                                    group by payload__pull_request__base__repo__html_url
                                    having total_pr_count > 1
                                    order by actor_count desc, total_pr_count desc))
                      and payload__pull_request__merged = 1
                    group by payload__pull_request__base__repo__html_url
                    order by pr_merge_count desc
    ) as b on a.payload__pull_request__base__repo__html_url = b.payload__pull_request__base__repo__html_url
where repo_total_pr_merge_count >= 20
  and pr_count_in_refer_repo >= 5
order by pr_count_in_refer_repo desc


